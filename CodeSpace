# Kitchen Display Issues & Complete Fixes

## ߚ **EXACT PROBLEMS IDENTIFIED**

### **Problem 1: Kitchen Link Missing from Sidebar Navigation Loop**
Your AdminLayout.js has the Kitchen in the navigation array, but the rendering loop is incomplete. The sidebar navigation is not properly rendering the Kitchen link.

### **Problem 2: No Kitchen Card in Dashboard**
Your dashboard shows quick access cards for other modules but no Kitchen card.

### **Problem 3: Frontend Cache Issue**
The changes might not be reflected due to Next.js cache.

---

## ߔ **COMPLETE FIXES**

### **Fix 1: Update AdminLayout.js Navigation Rendering**

**PROBLEM:** Your AdminLayout.js has Kitchen in the array but the navigation rendering is incomplete.

**REPLACE:** `components/layouts/AdminLayout.js`

```javascript
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';

export default function AdminLayout({ children }) {
  const router = useRouter();
  const [currentPath, setCurrentPath] = useState('');
  const [user, setUser] = useState(null);

  useEffect(() => {
    setCurrentPath(router.pathname);
    
    // Get user from localStorage (same as your existing logic)
    try {
      const userData = localStorage.getItem('user');
      if (userData) {
        setUser(JSON.parse(userData));
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  }, [router.pathname]);

  const handleLogout = () => {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    localStorage.removeItem('access');
    localStorage.removeItem('refresh');
    router.push('/login');
  };

  // Enhanced navigation items with Kitchen added
  const navigation = [
    {
      name: 'Dashboard',
      href: '/admin/dashboard',
      icon: 'ߓ',
      current: currentPath === '/admin/dashboard'
    },
    {
      name: 'Kitchen / किचन',
      href: '/kitchen',
      icon: 'ߍ',
      current: currentPath === '/kitchen'
    },
    {
      name: 'Rooms',
      href: '/admin/manage-rooms',
      icon: 'ߏ',
      current: currentPath === '/admin/manage-rooms'
    },
    {
      name: 'Menu',
      href: '/admin/manage-menu',
      icon: 'ߍ️', 
      current: currentPath === '/admin/manage-menu'
    },
    {
      name: 'Staff / स्टाफ',
      href: '/admin/manage-staff',
      icon: 'ߑ',
      current: currentPath === '/admin/manage-staff'
    },
    {
      name: 'Orders',
      href: '/admin/orders',
      icon: 'ߓ',
      current: currentPath === '/admin/orders'
    },
    {
      name: 'Billing',
      href: '/admin/billing',
      icon: 'ߒ',
      current: currentPath === '/admin/billing'
    },
    {
      name: 'Categories',
      href: '/admin/inventory-categories', 
      icon: 'ߏ️',
      current: currentPath === '/admin/inventory-categories'
    }
  ];

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-white shadow-lg">
        <div className="p-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-8">Admin Panel</h1>
          
          {/* Navigation Menu */}
          <nav className="space-y-2">
            {navigation.map((item) => (
              <Link key={item.name} href={item.href}>
                <a className={`
                  flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors
                  ${item.current 
                    ? 'bg-blue-100 text-blue-700 border-r-4 border-blue-700' 
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
                  }
                `}>
                  <span className="text-xl">{item.icon}</span>
                  <span>{item.name}</span>
                </a>
              </Link>
            ))}
          </nav>
        </div>

        {/* User Info */}
        <div className="absolute bottom-0 w-64 p-6 border-t">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold">
              {user?.email?.charAt(0).toUpperCase() || 'A'}
            </div>
            <div className="flex-1">
              <p className="text-sm font-medium text-gray-900">
                {user?.email || 'Admin'}
              </p>
              <p className="text-xs text-gray-500">Admin</p>
            </div>
            <button
              onClick={handleLogout}
              className="text-gray-400 hover:text-gray-600 p-2 rounded"
              title="Logout"
            >
              ߚ
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-auto">
        {children}
      </div>
    </div>
  );
}
```

---

### **Fix 2: Add Kitchen Card to Dashboard**

**UPDATE:** `pages/admin/dashboard.js`

Find the "Main Navigation Cards" section and add Kitchen card:

```javascript
{/* Main Navigation Cards */}
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
  
  {/* ✅ ADD KITCHEN CARD HERE */}
  <QuickActionCard
    href="/kitchen"
    icon="ߍ"
    title="Kitchen Display"
    subtitle="रसोई डिस्प्ले"
    description="View and manage kitchen orders in real-time / रियल-टाइम में रसोई के ऑर्डर देखें और प्रबंधित करें"
  />
  
  <QuickActionCard
    href="/admin/restaurant-billing"
    icon="ߍ️"
    title="Restaurant Billing"
    subtitle="रेस्टोरेंट बिलिंग"
    description="Create bills for restaurant orders / रेस्टोरेंट ऑर्डर के लिए बिल बनाएं"
  />
  
  <QuickActionCard
    href="/admin/room-billing"
    icon="ߏ"
    title="Room Billing"
    subtitle="कमरा बिलिंग"
    description="Manage hotel room bills / होटल रूम बिल प्रबंधित करें"
  />
  
  <QuickActionCard
    href="/admin/bill-history"
    icon="ߓ"
    title="Bill History"
    subtitle="बिल इतिहास"
    description="View all billing records / सभी बिलिंग रिकॉर्ड देखें"
  />
  
  <QuickActionCard
    href="/admin/manage-rooms"
    icon="ߏ"
    title="Manage Rooms"
    subtitle="कमरे प्रबंधन"
    description="Add and manage hotel rooms / होटल के कमरे जोड़ें और प्रबंधित करें"
  />
  
  <QuickActionCard
    href="/admin/manage-menu"
    icon="ߍ️"
    title="Manage Menu"
    subtitle="मेनू प्रबंधन"
    description="Update restaurant menu items / रेस्टोरेंट मेनू आइटम अपडेट करें"
  />
  
  <QuickActionCard
    href="/admin/manage-staff"
    icon="ߑ"
    title="Manage Staff"
    subtitle="स्टाफ प्रबंधन"
    description="Add and manage staff members / स्टाफ सदस्यों को जोड़ें और प्रबंधित करें"
  />
  
  <QuickActionCard
    href="/admin/analytics"
    icon="ߓ"
    title="Analytics"
    subtitle="विश्लेषण"
    description="View business analytics and reports / व्यापारिक विश्लेषण और रिपोर्ट देखें"
  />
  
</div>
```

---

### **Fix 3: Create Kitchen Page (if missing)**

**CREATE FILE:** `pages/kitchen/index.js`

```javascript
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import AdminLayout from '@/components/layouts/AdminLayout';

function KitchenDisplay() {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [audioEnabled, setAudioEnabled] = useState(false);

  useEffect(() => {
    fetchOrders();
    const interval = setInterval(fetchOrders, 20000); // 20 second refresh
    return () => clearInterval(interval);
  }, [user]);

  const fetchOrders = async () => {
    if (!user?.access) return;
    
    try {
      setError('');
      const response = await fetch('/api/tables/kitchen/', {
        headers: { 
          Authorization: `Bearer ${user.access}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('Kitchen API Response:', data); // Debug log
        
        const ordersArray = Array.isArray(data) ? data : [];
        setOrders(ordersArray);
        setLastUpdated(new Date());
        
        // Audio notification for new orders
        if (audioEnabled && ordersArray.length > 0) {
          playNotificationSound();
        }
      } else {
        setError(`Failed to load orders / ऑर्डर लोड करने में विफल: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('Kitchen fetch error:', error);
      setError('Network error loading orders / ऑर्डर लोड करने में नेटवर्क त्रुटि');
    } finally {
      setLoading(false);
    }
  };

  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      const response = await fetch(`/api/tables/kitchen/${orderId}/update_status/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.access}`
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        fetchOrders(); // Refresh orders
      } else {
        setError('Failed to update order status / ऑर्डर स्थिति अपडेट करने में विफल');
      }
    } catch (error) {
      console.error('Status update error:', error);
      setError('Network error updating status / स्थिति अपडेट करने में नेटवर्क त्रुटि');
    }
  };

  const playNotificationSound = () => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.value = 800;
      oscillator.type = 'square';
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.5);
    } catch (error) {
      console.log('Audio not supported');
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-red-100 border-red-500 text-red-800';
      case 'preparing': return 'bg-yellow-100 border-yellow-500 text-yellow-800';
      case 'ready': return 'bg-green-100 border-green-500 text-green-800';
      default: return 'bg-gray-100 border-gray-500 text-gray-800';
    }
  };

  const getOrderAge = (orderTime) => {
    const now = new Date();
    const created = new Date(orderTime);
    const diffMinutes = Math.floor((now - created) / (1000 * 60));
    return diffMinutes;
  };

  if (loading) {
    return (
      <AdminLayout>
        <div className="min-h-screen bg-gray-100 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
            <p className="text-xl font-semibold text-gray-700">Loading Kitchen Orders... / किचन ऑर्डर लोड हो रहे हैं...</p>
          </div>
        </div>
      </AdminLayout>
    );
  }

  // Filter orders by status
  const pendingOrders = orders.filter(order => order.order_item?.status === 'pending');
  const preparingOrders = orders.filter(order => order.order_item?.status === 'preparing');
  const readyOrders = orders.filter(order => order.order_item?.status === 'ready');

  return (
    <AdminLayout>
      <div className="p-6">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-800">ߍ Kitchen Display / किचन डिस्प्ले</h1>
            <p className="text-gray-600">
              {orders.length} total orders / कुल ऑर्डर • Last updated / अंतिम अपडेट: {lastUpdated.toLocaleTimeString()}
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setAudioEnabled(!audioEnabled)}
              className={`px-4 py-2 rounded ${audioEnabled ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-700'}`}
            >
              ߔ Audio {audioEnabled ? 'ON / चालू' : 'OFF / बंद'}
            </button>
            <button
              onClick={fetchOrders}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              ߔ Refresh / रिफ्रेश
            </button>
          </div>
        </div>
        
        {error && (
          <div className="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}

        {/* Status Summary */}
        <div className="grid grid-cols-3 gap-4 mb-6">
          <div className="bg-red-100 p-4 rounded-lg text-center">
            <h3 className="text-2xl font-bold text-red-800">{pendingOrders.length}</h3>
            <p className="text-red-600">Pending Orders / लंबित ऑर्डर</p>
          </div>
          <div className="bg-yellow-100 p-4 rounded-lg text-center">
            <h3 className="text-2xl font-bold text-yellow-800">{preparingOrders.length}</h3>
            <p className="text-yellow-600">Preparing / तैयार हो रहे</p>
          </div>
          <div className="bg-green-100 p-4 rounded-lg text-center">
            <h3 className="text-2xl font-bold text-green-800">{readyOrders.length}</h3>
            <p className="text-green-600">Ready to Serve / परोसने के लिए तैयार</p>
          </div>
        </div>

        {/* Orders Display */}
        {orders.length === 0 ? (
          <div className="bg-white rounded-lg p-12 text-center">
            <div className="text-6xl mb-4">ߎ</div>
            <h2 className="text-2xl font-bold text-gray-700 mb-2">All Orders Complete! / सभी ऑर्डर पूरे!</h2>
            <p className="text-gray-500">No pending orders in the kitchen / किचन में कोई लंबित ऑर्डर नहीं</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {orders.map((order) => {
              const orderAge = getOrderAge(order.display_time || order.order_item?.order_time);
              const isUrgent = orderAge > 20;
              
              return (
                <div
                  key={order.id}
                  className={`bg-white border-2 rounded-lg p-4 shadow-md ${getStatusColor(order.order_item?.status)} ${isUrgent ? 'animate-pulse border-red-600' : ''}`}
                >
                  <div className="flex justify-between items-start mb-3">
                    <div>
                      <h3 className="text-lg font-bold">Table {order.table_number} / टेबल {order.table_number}</h3>
                      <p className="text-sm text-gray-600">Order #{order.order_number} / ऑर्डर नं.</p>
                    </div>
                    {isUrgent && (
                      <span className="bg-red-500 text-white px-2 py-1 rounded text-xs font-bold">
                        URGENT / तत्काल
                      </span>
                    )}
                  </div>

                  <div className="mb-3">
                    <p className="font-semibold">{order.order_item?.menu_item?.name_en}</p>
                    <p className="text-sm text-gray-600">Qty / मात्रा: {order.order_item?.quantity}</p>
                    {order.order_item?.special_instructions && (
                      <p className="text-sm italic text-blue-600">
                        Note / नोट: {order.order_item.special_instructions}
                      </p>
                    )}
                  </div>

                  <div className="mb-3 text-sm text-gray-600">
                    <p>Customer / ग्राहक: {order.customer_name}</p>
                    <p>Waiter / वेटर: {order.waiter_name}</p>
                    <p>Age / समय: {orderAge} minutes / मिनट</p>
                  </div>

                  <div className="flex gap-2">
                    {order.order_item?.status === 'pending' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'preparing')}
                        className="bg-yellow-500 text-white px-3 py-1 rounded text-sm hover:bg-yellow-600"
                      >
                        Start Cooking / खाना बनाना शुरू करें
                      </button>
                    )}
                    {order.order_item?.status === 'preparing' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'ready')}
                        className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600"
                      >
                        Food Ready / खाना तैयार
                      </button>
                    )}
                    {order.order_item?.status === 'ready' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'served')}
                        className="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
                      >
                        Mark Served / परोसा गया
                      </button>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </AdminLayout>
  );
}

export default withRoleGuard(KitchenDisplay, ['admin', 'staff']);
```

---

## ߚ **IMMEDIATE ACTION STEPS**

### **Step 1: Apply All 3 Fixes**
1. **Replace AdminLayout.js** with the fixed navigation rendering
2. **Update dashboard.js** to add Kitchen card
3. **Create pages/kitchen/index.js** with the kitchen display

### **Step 2: Clear Cache & Restart**
```bash
cd hotel-management-frontend
rm -rf .next/
npm run dev
```

### **Step 3: Test Kitchen Access**
1. **Login as admin** → Go to `/admin/dashboard`
2. **Check sidebar** → Should see "ߍ Kitchen / किचन" link
3. **Check dashboard cards** → Should see Kitchen Display card
4. **Click either** → Should navigate to `/kitchen`

### **Step 4: Debug If Still Not Working**

**Run this in browser console to check navigation:**
```javascript
// Check if user has kitchen access
const userData = JSON.parse(localStorage.getItem('user'));
console.log('User data:', userData);
console.log('Can access kitchen:', userData?.can_access_kitchen);

// Check current path
console.log('Current path:', window.location.pathname);

// Test kitchen API
fetch('/api/tables/kitchen/', {
  headers: { Authorization: 'Bearer ' + localStorage.getItem('access') }
})
.then(r => r.json())
.then(data => console.log('Kitchen API works:', data))
.catch(err => console.error('Kitchen API error:', err));
```

---

## ߔ **EXPECTED RESULTS**

After applying fixes, you should see:

1. **✅ Sidebar Navigation:** "ߍ Kitchen / किचन" link visible
2. **✅ Dashboard Card:** Kitchen Display card with bilingual text
3. **✅ Kitchen Page:** Full kitchen display when clicking either link
4. **✅ Real-time Updates:** Orders refresh every 20 seconds

**The issue was that your AdminLayout navigation rendering was incomplete! Apply these fixes and you'll see the Kitchen options.** ߔ
