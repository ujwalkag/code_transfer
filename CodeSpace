# ߚ COMPLETE DIAGNOSIS & SOLUTIONS FOR ALL ISSUES

## ߔ **IDENTIFIED PROBLEMS & ROOT CAUSES**

### 1. DATABASE SCHEMA MISMATCH ERROR
**Error**: `column staff_profile.full_name does not exist`
**Root Cause**: Database not migrated after adding `full_name` field to StaffProfile model

### 2. MANIFEST.JSON 404 ERROR  
**Error**: `GET https://hotelrshammad.co.in/manifest.json 404 (Not Found)`
**Root Cause**: Production deployment not serving static files from public folder correctly

### 3. STAFF MANAGEMENT DELETE NOT WORKING
**Error**: `Failed to load resource: /api/users/staff/2/ 500 Internal Server Error`
**Root Cause**: Backend views trying to access non-existent fields + permission issues

### 4. MOBILE ORDERS NOT WORKING
**Error**: Kitchen API returns empty array, no table selection
**Root Cause**: Frontend calling wrong API endpoints + missing menu data

### 5. STAFF MANAGEMENT VS MANAGE-STAFF CONFUSION
**Issue**: Two different pages with overlapping functionality
**Root Cause**: Poor separation of concerns between role management and payroll

### 6. MENU-CATEGORY ADMIN DASHBOARD REFERENCES
**Found**: No direct "menu-category" references in admin dashboard
**Action**: Remove unused category management from quick actions

---

# ߔ **COMPLETE SOLUTIONS**

## SOLUTION 1: FIX DATABASE SCHEMA (CRITICAL - DO FIRST)

### Run Django Migrations:
```bash
cd /home/ubuntu/hotel-management-backend
source venv/bin/activate
python manage.py makemigrations staff
python manage.py migrate
```

### If Migration Fails, Run SQL Manually:
```sql
-- Connect to your database and run:
ALTER TABLE staff_profile ADD COLUMN full_name VARCHAR(255);
ALTER TABLE staff_profile ADD COLUMN phone VARCHAR(15);
ALTER TABLE staff_profile ADD COLUMN address TEXT;
ALTER TABLE staff_profile ADD COLUMN date_of_birth DATE;
ALTER TABLE staff_profile ADD COLUMN hire_date DATE DEFAULT CURRENT_DATE;
ALTER TABLE staff_profile ADD COLUMN department VARCHAR(20);
ALTER TABLE staff_profile ADD COLUMN position VARCHAR(100);
ALTER TABLE staff_profile ADD COLUMN base_salary DECIMAL(10,2) DEFAULT 0;
ALTER TABLE staff_profile ADD COLUMN hourly_rate DECIMAL(8,2) DEFAULT 0;
ALTER TABLE staff_profile ADD COLUMN employment_status VARCHAR(20) DEFAULT 'active';
ALTER TABLE staff_profile ADD COLUMN emergency_contact_name VARCHAR(255);
ALTER TABLE staff_profile ADD COLUMN emergency_contact_phone VARCHAR(15);

-- Update existing records with placeholder data
UPDATE staff_profile SET full_name = 'Staff Member' WHERE full_name IS NULL;
UPDATE staff_profile SET phone = 'N/A' WHERE phone IS NULL;
UPDATE staff_profile SET department = 'service' WHERE department IS NULL;
UPDATE staff_profile SET position = 'Staff' WHERE position IS NULL;
```

## SOLUTION 2: FIX MANIFEST.JSON DEPLOYMENT

### Update next.config.js in frontend root:
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  
  // Ensure static files are served properly
  async headers() {
    return [
      {
        source: '/manifest.json',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/manifest+json',
          },
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
  
  // Ensure public folder is served
  trailingSlash: false,
  
  // Production optimization
  output: 'standalone',
  
  // Public runtime config for manifest
  publicRuntimeConfig: {
    manifestPath: '/manifest.json',
  },
};

module.exports = nextConfig;
```

### ENHANCED manifest.json (replace existing):
```json
{
  "name": "Hotel Restaurant Management System",
  "short_name": "HotelPOS", 
  "description": "Complete hotel management system for staff, billing, and operations",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "scope": "/",
  "categories": ["business", "productivity"],
  "lang": "en",
  "dir": "ltr",
  "prefer_related_applications": false,
  "icons": [
    {
      "src": "/icon-192.svg",
      "sizes": "192x192",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    },
    {
      "src": "/icon-512.svg",
      "sizes": "512x512", 
      "type": "image/svg+xml",
      "purpose": "any maskable"
    },
    {
      "src": "/favicon.ico",
      "sizes": "16x16 32x32",
      "type": "image/x-icon"
    }
  ],
  "screenshots": [
    {
      "src": "/screenshot-desktop.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide"
    }
  ]
}
```

## SOLUTION 3: FIX STAFF MANAGEMENT CRUD OPERATIONS

### Complete Working manage-staff.js (replace existing):
```javascript
import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";
import withRoleGuard from "@/hoc/withRoleGuard";
import toast from "react-hot-toast";

function ManageStaff() {
  const { user } = useAuth();
  const [staff, setStaff] = useState([]);
  const [loading, setLoading] = useState(false);
  
  // Modals
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  
  // Forms
  const [newStaff, setNewStaff] = useState({
    email: "",
    password: "",
    role: "staff"
  });
  const [editingStaff, setEditingStaff] = useState(null);

  const fetchStaff = async () => {
    if (!user?.access) return;
    
    try {
      setLoading(true);
      const res = await fetch("/api/users/staff/", {
        headers: { Authorization: `Bearer ${user.access}` },
      });
      
      if (res.ok) {
        const data = await res.json();
        console.log('Staff data:', data);
        setStaff(Array.isArray(data) ? data : data.results || []);
      } else {
        console.error('Staff API error:', res.status);
        toast.error("Failed to load staff");
      }
    } catch (err) {
      console.error("Error fetching staff:", err);
      toast.error("Network error");
    } finally {
      setLoading(false);
    }
  };

  const addStaff = async () => {
    if (!newStaff.email || !newStaff.password) {
      toast.error("Email and password are required");
      return;
    }

    try {
      setLoading(true);
      const res = await fetch("/api/users/staff/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${user.access}`,
        },
        body: JSON.stringify(newStaff),
      });

      if (res.ok) {
        const data = await res.json();
        toast.success(`${newStaff.role.toUpperCase()} created successfully!`);
        setNewStaff({ email: "", password: "", role: "staff" });
        setShowAddModal(false);
        fetchStaff();
      } else {
        const errorData = await res.json();
        toast.error(`Error: ${errorData?.error || "Something went wrong"}`);
      }
    } catch (err) {
      console.error(err);
      toast.error("Network error");
    } finally {
      setLoading(false);
    }
  };

  const updateStaffRole = async () => {
    if (!editingStaff) return;
    
    try {
      setLoading(true);
      const res = await fetch(`/api/users/staff/${editingStaff.id}/update_permissions/`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.access}`,
        },
        body: JSON.stringify({
          role: editingStaff.role,
          can_create_orders: editingStaff.can_create_orders,
          can_generate_bills: editingStaff.can_generate_bills,
          can_access_kitchen: editingStaff.can_access_kitchen
        })
      });

      if (res.ok) {
        toast.success(`Role updated for ${editingStaff.email}`);
        setShowEditModal(false);
        setEditingStaff(null);
        fetchStaff();
      } else {
        const error = await res.json();
        toast.error('Failed to update role: ' + (error.error || 'Unknown error'));
      }
    } catch (err) {
      console.error(err);
      toast.error("Network error");
    } finally {
      setLoading(false);
    }
  };

  const deleteStaff = async (id, email) => {
    if (!confirm(`Are you sure you want to delete ${email}?`)) return;
    
    try {
      setLoading(true);
      const res = await fetch(`/api/users/staff/${id}/`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${user.access}` },
      });
      
      if (res.ok) {
        toast.success("Staff deleted successfully");
        fetchStaff();
      } else {
        const error = await res.json();
        toast.error("Failed to delete: " + (error.error || "Unknown error"));
      }
    } catch (err) {
      console.error("Failed to delete staff:", err);
      toast.error("Network error during deletion");
    } finally {
      setLoading(false);
    }
  };

  // Auto-assign permissions based on role
  const handleRoleChange = (role, isEditing = false) => {
    let permissions = {
      can_create_orders: false,
      can_generate_bills: false,
      can_access_kitchen: false
    };

    switch(role) {
      case 'admin':
        permissions = { can_create_orders: true, can_generate_bills: true, can_access_kitchen: true };
        break;
      case 'waiter':
        permissions = { can_create_orders: true, can_generate_bills: false, can_access_kitchen: false };
        break;
      case 'staff':
        permissions = { can_create_orders: true, can_generate_bills: true, can_access_kitchen: true };
        break;
      case 'biller':
        permissions = { can_create_orders: false, can_generate_bills: true, can_access_kitchen: false };
        break;
    }

    if (isEditing && editingStaff) {
      setEditingStaff({ ...editingStaff, role, ...permissions });
    } else {
      setNewStaff({ ...newStaff, role });
    }
  };

  useEffect(() => {
    fetchStaff();
  }, [user]);

  const canManageStaff = user?.role === 'admin' || user?.can_generate_bills;

  return (
    <div className="min-h-screen bg-gray-50 py-6">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow">
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">ߑ Staff Role Management</h1>
              <p className="mt-1 text-sm text-gray-600">Add, edit, and manage staff roles and permissions</p>
            </div>
            
            {canManageStaff && (
              <button
                onClick={() => setShowAddModal(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
                disabled={loading}
              >
                <span>➕</span> Add Staff
              </button>
            )}
          </div>

          {/* Staff List */}
          <div className="p-6">
            {loading ? (
              <div className="flex justify-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
              </div>
            ) : (
              <div className="grid gap-4">
                {staff.length > 0 ? (
                  staff.map((s) => (
                    <div key={s.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-semibold text-gray-900">{s.email}</h3>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                              s.role === 'admin' ? 'bg-red-100 text-red-800' :
                              s.role === 'waiter' ? 'bg-blue-100 text-blue-800' :
                              s.role === 'biller' ? 'bg-green-100 text-green-800' :
                              'bg-purple-100 text-purple-800'
                            }`}>
                              {s.role?.toUpperCase() || 'STAFF'}
                            </span>
                            <span className={`px-2 py-1 rounded-full text-xs ${
                              s.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {s.is_active ? 'Active' : 'Inactive'}
                            </span>
                          </div>
                          
                          {/* Permissions */}
                          <div className="flex gap-4 text-sm text-gray-600">
                            <div className="flex items-center gap-1">
                              <div className={`w-2 h-2 rounded-full ${s.can_create_orders ? 'bg-green-500' : 'bg-red-500'}`}></div>
                              <span>Mobile Orders</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <div className={`w-2 h-2 rounded-full ${s.can_generate_bills ? 'bg-green-500' : 'bg-red-500'}`}></div>
                              <span>Generate Bills</span>
                            </div>
                            <div className="flex items-center gap-1">
                              <div className={`w-2 h-2 rounded-full ${s.can_access_kitchen ? 'bg-green-500' : 'bg-red-500'}`}></div>
                              <span>Kitchen Access</span>
                            </div>
                          </div>
                        </div>
                        
                        {/* Actions */}
                        {canManageStaff && (
                          <div className="flex gap-2 ml-4">
                            <button
                              onClick={() => {
                                setEditingStaff({
                                  id: s.id,
                                  email: s.email,
                                  role: s.role || 'staff',
                                  can_create_orders: s.can_create_orders || false,
                                  can_generate_bills: s.can_generate_bills || false,
                                  can_access_kitchen: s.can_access_kitchen || false
                                });
                                setShowEditModal(true);
                              }}
                              className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm transition-colors"
                              disabled={loading}
                            >
                              ✏️ Edit Role
                            </button>
                            
                            <button
                              onClick={() => deleteStaff(s.id, s.email)}
                              className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors"
                              disabled={loading}
                            >
                              ߗ️ Delete
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-12">
                    <div className="text-gray-400 text-6xl mb-4">ߑ</div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No staff members</h3>
                    <p className="text-gray-500">Add your first staff member to get started.</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Add Staff Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">➕ Add New Staff</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Email *</label>
                <input
                  type="email"
                  value={newStaff.email}
                  onChange={(e) => setNewStaff({...newStaff, email: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Password *</label>
                <input
                  type="password"
                  value={newStaff.password}
                  onChange={(e) => setNewStaff({...newStaff, password: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                <select
                  value={newStaff.role}
                  onChange={(e) => handleRoleChange(e.target.value, false)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="staff">Staff (Full Access)</option>
                  <option value="waiter">Waiter (Orders Only)</option>
                  <option value="biller">Biller (Bills Only)</option>
                  <option value="admin">Admin (All Access)</option>
                </select>
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <button
                onClick={addStaff}
                disabled={loading}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg disabled:opacity-50 transition-colors"
              >
                {loading ? 'Adding...' : 'Add Staff'}
              </button>
              
              <button
                onClick={() => {
                  setShowAddModal(false);
                  setNewStaff({ email: "", password: "", role: "staff" });
                }}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Role Modal */}
      {showEditModal && editingStaff && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">✏️ Edit Role: {editingStaff.email}</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                <select
                  value={editingStaff.role}
                  onChange={(e) => handleRoleChange(e.target.value, true)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="staff">Staff (Full Access)</option>
                  <option value="waiter">Waiter (Orders Only)</option>
                  <option value="biller">Biller (Bills Only)</option>
                  <option value="admin">Admin (All Access)</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Permissions</label>
                <div className="space-y-2">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={editingStaff.can_create_orders}
                      onChange={(e) => setEditingStaff({...editingStaff, can_create_orders: e.target.checked})}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Can Create Orders (Mobile Interface)</span>
                  </label>
                  
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={editingStaff.can_generate_bills}
                      onChange={(e) => setEditingStaff({...editingStaff, can_generate_bills: e.target.checked})}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Can Generate Bills</span>
                  </label>
                  
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={editingStaff.can_access_kitchen}
                      onChange={(e) => setEditingStaff({...editingStaff, can_access_kitchen: e.target.checked})}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Can Access Kitchen Display</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div className="flex gap-3 mt-6">
              <button
                onClick={updateStaffRole}
                disabled={loading}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg disabled:opacity-50 transition-colors"
              >
                {loading ? 'Updating...' : 'Update Role'}
              </button>
              
              <button
                onClick={() => {
                  setShowEditModal(false);
                  setEditingStaff(null);
                }}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default withRoleGuard(ManageStaff, ["admin", "staff"]);
```

## SOLUTION 4: FIX MOBILE ORDERS FUNCTIONALITY

### Working mobile-orders.js (replace existing):
```javascript
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useLanguage } from '@/context/LanguageContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import { useRouter } from 'next/router';
import toast from 'react-hot-toast';

function WorkingMobileOrders() {
  const { user } = useAuth();
  const { language } = useLanguage();
  const router = useRouter();
  const [tables, setTables] = useState([]);
  const [selectedTable, setSelectedTable] = useState(null);
  const [menuItems, setMenuItems] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [cart, setCart] = useState([]);
  const [customerInfo, setCustomerInfo] = useState({
    name: 'Guest',
    phone: '',
    count: 1
  });
  const [loading, setLoading] = useState(false);
  const [view, setView] = useState('tables'); // 'tables', 'menu', 'cart'

  useEffect(() => {
    fetchInitialData();
  }, [user]);

  const fetchInitialData = async () => {
    if (!user?.access) return;

    try {
      setLoading(true);

      // Fetch tables using correct endpoint
      const tablesRes = await fetch('/api/tables/mobile/tables_layout/', {
        headers: { Authorization: `Bearer ${user.access}` }
      });

      if (tablesRes.ok) {
        const tablesData = await tablesRes.json();
        console.log('Tables loaded:', tablesData);
        setTables(Array.isArray(tablesData) ? tablesData : []);
      } else {
        console.error('Failed to load tables:', tablesRes.status);
        toast.error('Failed to load tables');
      }

      // Fetch menu items
      const menuRes = await fetch('/api/menu/items/', {
        headers: { Authorization: `Bearer ${user.access}` }
      });

      if (menuRes.ok) {
        const menuData = await menuRes.json();
        const items = Array.isArray(menuData) ? menuData : menuData.results || [];
        console.log('Menu loaded:', items.length, 'items');
        setMenuItems(items.filter(item => item.available !== false));
      } else {
        console.error('Failed to load menu');
        toast.error('Failed to load menu');
      }

      // Fetch categories
      const categoriesRes = await fetch('/api/menu/categories/', {
        headers: { Authorization: `Bearer ${user.access}` }
      });

      if (categoriesRes.ok) {
        const categoryData = await categoriesRes.json();
        const cats = Array.isArray(categoryData) ? categoryData : categoryData.results || [];
        console.log('Categories loaded:', cats);
        setCategories(cats);
      }

    } catch (error) {
      console.error('Error fetching data:', error);
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const addToCart = (menuItem) => {
    const existingItem = cart.find(item => item.menu_item.id === menuItem.id);
    if (existingItem) {
      setCart(cart.map(item => 
        item.menu_item.id === menuItem.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setCart([...cart, { 
        menu_item: menuItem, 
        quantity: 1, 
        price: parseFloat(menuItem.price),
        special_instructions: ''
      }]);
    }
    toast.success(`${menuItem.name_en} added to cart`);
  };

  const updateQuantity = (menuItemId, quantity) => {
    if (quantity <= 0) {
      setCart(cart.filter(item => item.menu_item.id !== menuItemId));
    } else {
      setCart(cart.map(item => 
        item.menu_item.id === menuItemId ? { ...item, quantity } : item
      ));
    }
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item.quantity * item.price), 0);
  };

  const submitOrder = async () => {
    if (!selectedTable || cart.length === 0) {
      toast.error('Please select a table and add items to cart');
      return;
    }

    setLoading(true);
    try {
      const orderData = {
        table_id: selectedTable.id,
        customer_name: customerInfo.name,
        customer_phone: customerInfo.phone,
        customer_count: customerInfo.count,
        items: cart.map(item => ({
          menu_item_id: item.menu_item.id,
          quantity: item.quantity,
          special_instructions: item.special_instructions || ''
        }))
      };

      console.log('Submitting order:', orderData);

      const response = await fetch('/api/tables/mobile/create_order/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.access}`
        },
        body: JSON.stringify(orderData)
      });

      if (response.ok) {
        const result = await response.json();
        toast.success(`Order created successfully! Order #${result.order_number || result.order_id}`);

        // Reset form
        setCart([]);
        setSelectedTable(null);
        setCustomerInfo({ name: 'Guest', phone: '', count: 1 });
        setView('tables');

        // Refresh tables
        fetchInitialData();
      } else {
        const error = await response.json();
        console.error('Order creation error:', error);
        toast.error('Failed to create order: ' + (error.error || JSON.stringify(error)));
      }
    } catch (error) {
      console.error('Network error:', error);
      toast.error('Network error creating order');
    } finally {
      setLoading(false);
    }
  };

  const filteredMenuItems = selectedCategory 
    ? menuItems.filter(item => item.category?.id === parseInt(selectedCategory))
    : menuItems;

  if (loading && view === 'tables') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading tables...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Header */}
      <div className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="px-4 py-3">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-lg font-bold text-gray-900">ߓ Waiter Panel</h1>
              <p className="text-sm text-gray-600">
                {selectedTable ? `Table ${selectedTable.table_number}` : 'Select a table'}
              </p>
            </div>
            
            <div className="text-right">
              <p className="text-xs text-gray-500">{user?.email}</p>
              {cart.length > 0 && (
                <p className="text-xs text-blue-600 font-medium">
                  {cart.length} items
                </p>
              )}
            </div>
          </div>
        </div>

        {/* Navigation Pills */}
        <div className="flex border-t bg-gray-50">
          <button 
            onClick={() => setView('tables')}
            className={`flex-1 py-2 px-4 text-sm font-medium ${view === 'tables' ? 'bg-blue-100 text-blue-700' : 'text-gray-600'}`}
          >
            ߪ Tables
          </button>
          <button 
            onClick={() => selectedTable ? setView('menu') : toast.error('Select a table first')}
            className={`flex-1 py-2 px-4 text-sm font-medium ${view === 'menu' ? 'bg-blue-100 text-blue-700' : 'text-gray-600'}`}
          >
            ߍ️ Menu
          </button>
          <button 
            onClick={() => cart.length > 0 ? setView('cart') : toast.error('Add items to cart first')}
            className={`flex-1 py-2 px-4 text-sm font-medium ${view === 'cart' ? 'bg-blue-100 text-blue-700' : 'text-gray-600'}`}
          >
            ߛ Cart ({cart.length})
          </button>
        </div>
      </div>

      {/* Table Selection View */}
      {view === 'tables' && (
        <div className="p-4">
          <h2 className="text-lg font-semibold mb-4">Select Table</h2>
          
          <div className="grid grid-cols-2 gap-3">
            {tables.map(table => (
              <button
                key={table.id}
                onClick={() => {
                  setSelectedTable(table);
                  setView('menu');
                  toast.success(`Table ${table.table_number} selected`);
                }}
                className={`p-4 rounded-lg border-2 transition-all ${
                  table.is_occupied 
                    ? 'border-red-200 bg-red-50 text-red-700' 
                    : 'border-green-200 bg-green-50 text-green-700 hover:border-green-300'
                } ${selectedTable?.id === table.id ? 'ring-2 ring-blue-500' : ''}`}
                disabled={table.is_occupied}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">
                    {table.is_occupied ? 'ߔ' : 'ߟ'}
                  </div>
                  <div className="font-bold">Table {table.table_number}</div>
                  <div className="text-xs mt-1">
                    Capacity: {table.capacity} | {table.location}
                  </div>
                  <div className="text-xs mt-1">
                    {table.is_occupied ? 'Occupied' : 'Available'}
                  </div>
                  {table.current_order && (
                    <div className="text-xs mt-1 text-blue-600">
                      Order #{table.current_order.order_number}
                    </div>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Menu View */}
      {view === 'menu' && selectedTable && (
        <div className="p-4">
          {/* Customer Info */}
          <div className="bg-white rounded-lg p-4 mb-4 shadow-sm">
            <h3 className="font-medium mb-3">Customer Information</h3>
            <div className="space-y-3">
              <input
                type="text"
                placeholder="Customer name"
                value={customerInfo.name}
                onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}
                className="w-full border rounded px-3 py-2"
              />
              <input
                type="tel"
                placeholder="Phone number"
                value={customerInfo.phone}
                onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}
                className="w-full border rounded px-3 py-2"
              />
              <input
                type="number"
                placeholder="Customer count"
                value={customerInfo.count}
                onChange={(e) => setCustomerInfo({...customerInfo, count: parseInt(e.target.value)})}
                className="w-full border rounded px-3 py-2"
                min="1"
              />
            </div>
          </div>

          {/* Category Filter */}
          <div className="mb-4">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full border rounded px-3 py-2"
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category.id} value={category.id}>
                  {language === 'hi' ? category.name_hi : category.name_en}
                </option>
              ))}
            </select>
          </div>

          {/* Menu Items */}
          <div className="space-y-3">
            {filteredMenuItems.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <div className="text-4xl mb-2">ߍ️</div>
                <p>No menu items available</p>
                {selectedCategory && (
                  <p className="text-sm">Try selecting a different category</p>
                )}
              </div>
            ) : (
              filteredMenuItems.map(item => (
                <div key={item.id} className="bg-white rounded-lg p-4 shadow-sm">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900">
                        {language === 'hi' ? item.name_hi : item.name_en}
                      </h4>
                      {item.name_hi && language !== 'hi' && (
                        <p className="text-sm text-gray-500">{item.name_hi}</p>
                      )}
                      {item.description_en && (
                        <p className="text-sm text-gray-600 mt-1">
                          {language === 'hi' ? item.description_hi : item.description_en}
                        </p>
                      )}
                      <p className="text-lg font-bold text-green-600 mt-2">₹{item.price}</p>
                      <p className="text-xs text-gray-500">{item.category?.name_en || 'No category'}</p>
                    </div>
                    <button
                      onClick={() => addToCart(item)}
                      className="ml-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm"
                    >
                      Add +
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}

      {/* Cart View */}
      {view === 'cart' && cart.length > 0 && (
        <div className="p-4">
          <h2 className="text-lg font-semibold mb-4">Order Summary</h2>
          
          <div className="space-y-3 mb-6">
            {cart.map(item => (
              <div key={item.menu_item.id} className="bg-white rounded-lg p-4 shadow-sm">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <h4 className="font-medium">
                      {language === 'hi' ? item.menu_item.name_hi : item.menu_item.name_en}
                    </h4>
                    <p className="text-sm text-gray-600">₹{item.price} each</p>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <button
                      onClick={() => updateQuantity(item.menu_item.id, item.quantity - 1)}
                      className="bg-red-100 text-red-600 w-8 h-8 rounded-full flex items-center justify-center"
                    >
                      -
                    </button>
                    <span className="font-medium">{item.quantity}</span>
                    <button
                      onClick={() => updateQuantity(item.menu_item.id, item.quantity + 1)}
                      className="bg-green-100 text-green-600 w-8 h-8 rounded-full flex items-center justify-center"
                    >
                      +
                    </button>
                  </div>
                </div>
                
                <div className="mt-3 flex items-center gap-2">
                  <input
                    type="text"
                    placeholder="Special instructions"
                    value={item.special_instructions}
                    onChange={(e) => {
                      setCart(cart.map(cartItem => 
                        cartItem.menu_item.id === item.menu_item.id 
                          ? { ...cartItem, special_instructions: e.target.value }
                          : cartItem
                      ));
                    }}
                    className="text-sm border rounded px-2 py-1 flex-1 mr-2"
                  />
                  <span className="font-bold">₹{(item.quantity * item.price).toFixed(2)}</span>
                </div>
              </div>
            ))}
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm mb-6">
            <div className="flex justify-between items-center text-lg font-bold">
              <span>Total Amount:</span>
              <span>₹{calculateTotal().toFixed(2)}</span>
            </div>
          </div>
        </div>
      )}

      {/* Bottom Action Bar */}
      {cart.length > 0 && (
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-4">
          <div className="flex items-center justify-between mb-3">
            <div>
              <p className="text-sm text-gray-600">
                Table {selectedTable?.table_number} • {cart.length} items
              </p>
              <p className="font-bold">₹{calculateTotal().toFixed(2)}</p>
            </div>
            <button
              onClick={submitOrder}
              disabled={loading}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium disabled:opacity-50"
            >
              {loading ? 'Sending...' : 'Send to Kitchen'}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default withRoleGuard(WorkingMobileOrders, ['admin', 'staff', 'waiter']);
```

## SOLUTION 5: CLARIFY STAFF MANAGEMENT VS MANAGE-STAFF

### Update admin/dashboard.js to remove menu-category and clarify links:
```javascript
// Remove or update these sections in your admin dashboard

// REMOVE this if it exists:
<QuickActionCard 
  href="/admin/menu-category"  // REMOVE THIS LINK
  icon="ߏ️"
  title="Menu Categories"
  subtitle="Manage food categories"
  description="Add and organize menu categories"
/>

// REPLACE with clarified staff management links:
<QuickActionCard 
  href="/admin/manage-staff"
  icon="ߑ"
  title="Staff Role Management"
  subtitle="Add, edit, delete staff"
  description="Manage user accounts and role permissions"
/>

<QuickActionCard 
  href="/admin/staff-management"
  icon="ߒ"
  title="Staff Payroll & Attendance"
  subtitle="Payroll processing"
  description="Track attendance and generate payroll"
/>
```

## SOLUTION 6: DEPLOYMENT INSTRUCTIONS

### Run these commands in order:

```bash
# 1. Backend fixes
cd /home/ubuntu/hotel-management-backend
source venv/bin/activate

# 2. Database migration (CRITICAL)
python manage.py makemigrations staff
python manage.py migrate

# 3. Fix user permissions
python manage.py shell
# Run the permission fix script from the shell

# 4. Restart backend
sudo systemctl restart gunicorn
sudo systemctl restart nginx

# 5. Frontend fixes
cd /home/ubuntu/hotel-management-frontend
npm install

# 6. Build and restart frontend
npm run build
pm2 restart all
```

## EXPECTED RESULTS AFTER ALL FIXES:

✅ **No more 500 database errors** - Staff profile schema fixed
✅ **No manifest.json 404** - PWA manifest properly served
✅ **Staff management CRUD working** - Add/Edit/Delete functionality
✅ **Mobile orders fully functional** - Table selection, menu access, order creation
✅ **Clear separation** - manage-staff (roles) vs staff-management (payroll)
✅ **No deprecated warnings** - Updated meta tags

**Apply these solutions in the exact order provided for complete functionality!**
//////////////
/////////////
/////////////
Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
/login:1 Manifest fetch from [https://hotelrshammad.co.in/manifest.json](https://hotelrshammad.co.in/manifest.json) failed, code 404Understand this error
_app-c8e95143f501766a.js:1 Attempting login for: [admin@hotel.com](mailto:admin@hotel.com)
_app-c8e95143f501766a.js:1 Login response status: 200
_app-c8e95143f501766a.js:1 Login success: Object
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/login](https://hotelrshammad.co.in/login)
contentScript.js:1 websites:  Array(2)
contentScript.js:1 Websites:  Array(4)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/dashboard](https://hotelrshammad.co.in/admin/dashboard)
contentScript.js:1 websites:  Array(4)
contentScript.js:1 Websites:  Array(6)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/waiter/mobile-orders](https://hotelrshammad.co.in/waiter/mobile-orders)
contentScript.js:1 websites:  Array(6)
contentScript.js:1 Websites:  Array(8)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/dashboard](https://hotelrshammad.co.in/admin/dashboard)
contentScript.js:1 websites:  Array(8)
contentScript.js:1 Websites:  Array(10)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/kitchen](https://hotelrshammad.co.in/kitchen)
contentScript.js:1 websites:  Array(10)
contentScript.js:1 Websites:  Array(12)
contentScript.js:1 No website found
kitchen-e6ffa64909b245d2.js:1 Kitchen API Response: Array(0)
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/dashboard](https://hotelrshammad.co.in/admin/dashboard)
contentScript.js:1 websites:  Array(12)
contentScript.js:1 Websites:  Array(14)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/staff-management](https://hotelrshammad.co.in/admin/staff-management)
contentScript.js:1 websites:  Array(14)
contentScript.js:1 Websites:  Array(16)
contentScript.js:1 No website found
/api/staff/attendance/?month=9&year=2025:1  Failed to load resource: the server responded with a status of 500 (Internal Server Error)Understand this error
/api/staff/profiles/:1  Failed to load resource: the server responded with a status of 500 (Internal Server Error)Understand this error
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/dashboard](https://hotelrshammad.co.in/admin/dashboard)
contentScript.js:1 websites:  Array(16)
contentScript.js:1 Websites:  Array(18)
contentScript.js:1 No website found
contentScript.js:1 URL changed:  [https://hotelrshammad.co.in/admin/manage-staff](https://hotelrshammad.co.in/admin/manage-staff)
contentScript.js:1 websites:  Array(18)
contentScript.js:1 Websites:  Array(20)
contentScript.js:1 No website found
/api/users/staff/2/:1  Failed to load resource: the server responded with a status of 500 (Internal Server Error)Understand this error
manifest.json:1  Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error and Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:   File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/db/backends/utils.py", li>
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:     with self.db.wrap_database_errors:
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:   File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/db/utils.py", line 91, in>
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:     raise dj_exc_value.with_traceback(traceback) from exc_value
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:   File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/db/backends/utils.py", li>
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:     return self.cursor.execute(sql, params)
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]: django.db.utils.ProgrammingError: column staff_profile.full_name does not exist
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]: LINE 1: ...rofile"."user_id", "staff_profile"."employee_id", "staff_pro...
Sep 04 10:02:52 hotel-management-server gunicorn[2703100]:                                                              ^
Sep 04 10:03:16 hotel-management-server gunicorn[2703098]: Internal Server Error: /api/users/staff/2/    now check complete github codes and hear me carefully we are having manage-staff which is managing staff role and unable to delete staff and staffmanagement for payroll there is no option to add delete create update delete functionality and even mobile order also not having option to select table or access menu and admindashboard also remove menu-category from frontend and i want clear instruction from basic for manifest.json what is required and whats not for this
