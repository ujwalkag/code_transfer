# Complete Implementation: Kitchen Display + Route Mapping

## Step 1: Create Kitchen Display Screen

### Create `pages/kitchen/index.js`:

```jsx
// pages/kitchen/index.js
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';

function KitchenDisplay() {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [error, setError] = useState('');

  useEffect(() => {
    fetchOrders();
    // Auto-refresh every 20 seconds for real-time updates
    const interval = setInterval(fetchOrders, 20000);
    return () => clearInterval(interval);
  }, [user]);

  const fetchOrders = async () => {
    if (!user?.access) return;
    
    try {
      setError('');
      const response = await fetch('/api/tables/kitchen/', {
        headers: { Authorization: `Bearer ${user.access}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        setOrders(Array.isArray(data) ? data : data.results || []);
        setLastUpdated(new Date());
      } else {
        setError('Failed to load kitchen orders');
      }
    } catch (error) {
      console.error('Error fetching kitchen orders:', error);
      setError('Network error loading orders');
    } finally {
      setLoading(false);
    }
  };

  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      const response = await fetch(`/api/tables/kitchen/${orderId}/update_status/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.access}`
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        // Show success feedback
        const button = document.activeElement;
        const originalText = button.textContent;
        const originalColor = button.style.backgroundColor;
        
        button.textContent = '✓ Updated!';
        button.style.backgroundColor = '#10B981';
        button.disabled = true;
        
        // Refresh orders
        setTimeout(() => {
          fetchOrders();
          if (button) {
            button.textContent = originalText;
            button.style.backgroundColor = originalColor;
            button.disabled = false;
          }
        }, 1500);
      } else {
        setError('Failed to update order status');
      }
    } catch (error) {
      console.error('Error updating order status:', error);
      setError('Network error updating order');
    }
  };

  const getOrderAge = (orderTime) => {
    const now = new Date();
    const ordered = new Date(orderTime);
    const diffMinutes = Math.floor((now - ordered) / 60000);
    return diffMinutes;
  };

  const getPriorityLevel = (orderTime) => {
    const age = getOrderAge(orderTime);
    if (age > 25) return 'critical';
    if (age > 15) return 'urgent';
    if (age > 8) return 'high';
    return 'normal';
  };

  const getOrderCardClass = (order) => {
    const priority = getPriorityLevel(order.order_item?.order_time || order.display_time);
    const status = order.order_item?.status || 'pending';
    
    let baseClass = 'bg-white border-2 rounded-xl p-4 shadow-lg transition-all duration-300 hover:shadow-xl';
    
    if (priority === 'critical') {
      baseClass += ' border-red-600 bg-red-50 animate-pulse ring-2 ring-red-400';
    } else if (priority === 'urgent') {
      baseClass += ' border-red-400 bg-red-50';
    } else if (priority === 'high') {
      baseClass += ' border-orange-400 bg-orange-50';
    } else if (status === 'preparing') {
      baseClass += ' border-blue-500 bg-blue-50';
    } else if (status === 'ready') {
      baseClass += ' border-green-500 bg-green-50';
    } else {
      baseClass += ' border-gray-300 hover:border-gray-400';
    }
    
    return baseClass;
  };

  const getPriorityBadge = (orderTime) => {
    const priority = getPriorityLevel(orderTime);
    const age = getOrderAge(orderTime);
    
    if (priority === 'critical') {
      return (
        <div className="bg-red-600 text-white px-2 py-1 rounded-full text-xs font-bold animate-pulse">
          ߚ CRITICAL - {age}min
        </div>
      );
    } else if (priority === 'urgent') {
      return (
        <div className="bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
          ⚠️ URGENT - {age}min
        </div>
      );
    } else if (priority === 'high') {
      return (
        <div className="bg-orange-500 text-white px-2 py-1 rounded-full text-xs font-medium">
          ߔ {age}min
        </div>
      );
    } else {
      return (
        <div className="bg-blue-500 text-white px-2 py-1 rounded-full text-xs">
          ⏱️ {age}min
        </div>
      );
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-xl shadow-lg">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
          <p className="text-xl font-semibold text-gray-700">Loading Kitchen Orders...</p>
          <p className="text-gray-500 mt-2">Connecting to kitchen system...</p>
        </div>
      </div>
    );
  }

  // Group orders by status for better organization
  const pendingOrders = orders.filter(o => o.order_item?.status === 'pending');
  const preparingOrders = orders.filter(o => o.order_item?.status === 'preparing');
  const readyOrders = orders.filter(o => o.order_item?.status === 'ready');
  const totalActiveOrders = pendingOrders.length + preparingOrders.length + readyOrders.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-white shadow-lg border-b-4 border-blue-600 p-4 mb-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-4xl font-bold text-gray-800 flex items-center">
                ߍ Kitchen Display
                <span className="ml-3 text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                  LIVE
                </span>
              </h1>
              <p className="text-gray-600 mt-1">
                {totalActiveOrders} active orders • Last updated: {lastUpdated.toLocaleTimeString()}
              </p>
            </div>
            
            {/* Status Summary */}
            <div className="flex space-x-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-red-600">{pendingOrders.length}</div>
                <div className="text-sm text-gray-500 font-medium">New Orders</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-600">{preparingOrders.length}</div>
                <div className="text-sm text-gray-500 font-medium">Cooking</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600">{readyOrders.length}</div>
                <div className="text-sm text-gray-500 font-medium">Ready</div>
              </div>
              
              {/* Refresh Button */}
              <button
                onClick={fetchOrders}
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors shadow-md hover:shadow-lg font-semibold"
              >
                ߔ Refresh
              </button>
            </div>
          </div>
          
          {/* Error Display */}
          {error && (
            <div className="mt-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded">
              <div className="flex">
                <div className="text-red-500 mr-2">❌</div>
                <div>{error}</div>
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 pb-8">
        {totalActiveOrders === 0 ? (
          <div className="bg-white rounded-xl p-12 text-center shadow-lg">
            <div className="text-8xl mb-6">ߎ</div>
            <h2 className="text-3xl font-bold text-gray-700 mb-4">All Orders Complete!</h2>
            <p className="text-gray-500 text-lg">No pending orders in the kitchen right now</p>
            <button
              onClick={fetchOrders}
              className="mt-6 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Check for New Orders
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {orders.map((order) => {
              const orderItem = order.order_item || {};
              const orderTime = orderItem.order_time || order.display_time;
              
              return (
                <div key={order.id} className={getOrderCardClass(order)}>
                  {/* Order Header */}
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="text-xl font-bold text-gray-800">
                        ߍ️ Table {order.table_number}
                      </h3>
                      <p className="text-sm text-gray-600 font-medium">
                        #{order.order_number}
                      </p>
                    </div>
                    <div className="text-right">
                      {getPriorityBadge(orderTime)}
                    </div>
                  </div>

                  {/* Order Item Details */}
                  <div className="mb-4 bg-gray-50 rounded-lg p-3">
                    <h4 className="font-bold text-lg text-gray-800 mb-2">
                      {orderItem.menu_item_name || 'Menu Item'}
                    </h4>
                    <div className="flex justify-between items-center">
                      <span className="text-gray-600">Quantity:</span>
                      <span className="font-bold text-xl bg-white px-3 py-1 rounded-lg shadow-sm">
                        {orderItem.quantity || 1}
                      </span>
                    </div>
                  </div>

                  {/* Special Instructions */}
                  {orderItem.special_instructions && (
                    <div className="mb-4 bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded">
                      <div className="flex items-start">
                        <span className="text-yellow-600 mr-2">ߓ</span>
                        <p className="text-sm font-medium text-yellow-800">
                          {orderItem.special_instructions}
                        </p>
                      </div>
                    </div>
                  )}

                  {/* Customer & Waiter Info */}
                  <div className="mb-4 space-y-2 text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                    <div className="flex items-center">
                      <span className="mr-2">ߑ</span>
                      <span>Customer: <strong>{order.customer_name || 'Guest'}</strong></span>
                    </div>
                    <div className="flex items-center">
                      <span className="mr-2">ߑ‍ߒ</span>
                      <span>Waiter: <strong>{order.waiter_name || 'Staff'}</strong></span>
                    </div>
                    {order.customer_count && (
                      <div className="flex items-center">
                        <span className="mr-2">ߪ</span>
                        <span>Guests: <strong>{order.customer_count}</strong></span>
                      </div>
                    )}
                  </div>

                  {/* Action Buttons */}
                  <div className="space-y-2">
                    {orderItem.status === 'pending' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'preparing')}
                        className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 px-4 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all font-bold text-lg shadow-md hover:shadow-lg transform hover:scale-105"
                      >
                        ߔ Start Cooking
                      </button>
                    )}
                    
                    {orderItem.status === 'preparing' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'ready')}
                        className="w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-4 rounded-lg hover:from-green-600 hover:to-green-700 transition-all font-bold text-lg shadow-md hover:shadow-lg transform hover:scale-105"
                      >
                        ✅ Food Ready
                      </button>
                    )}
                    
                    {orderItem.status === 'ready' && (
                      <button
                        onClick={() => updateOrderStatus(order.id, 'served')}
                        className="w-full bg-gradient-to-r from-purple-500 to-purple-600 text-white py-3 px-4 rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all font-bold text-lg shadow-md hover:shadow-lg transform hover:scale-105"
                      >
                        ߚ Mark Served
                      </button>
                    )}
                  </div>

                  {/* Critical Priority Alert */}
                  {getPriorityLevel(orderTime) === 'critical' && (
                    <div className="mt-3 bg-red-600 text-white text-center py-2 rounded-lg font-bold animate-bounce">
                      ߚ CRITICAL DELAY - RUSH ORDER!
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

export default withRoleGuard(KitchenDisplay, ['admin', 'staff']);
```

## Step 2: Add Kitchen Navigation

### Update your main navigation component (likely in `components/Layout.js` or similar):

```jsx
// In your navigation component
import Link from 'next/link';
import { useAuth } from '@/context/AuthContext';

export default function Navigation() {
  const { user } = useAuth();

  return (
    <nav className="navigation">
      {/* Existing navigation items */}
      
      {/* Add Kitchen link for admin and staff */}
      {(user?.role === 'admin' || user?.role === 'staff') && (
        <Link href="/kitchen">
          <a className="nav-item flex items-center space-x-2 px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
            ߍ <span>Kitchen Display</span>
          </a>
        </Link>
      )}
      
      {/* Waiter link */}
      {(user?.role === 'admin' || user?.role === 'staff' || user?.role === 'waiter') && (
        <Link href="/waiter">
          <a className="nav-item flex items-center space-x-2 px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg">
            ߑ‍ߒ <span>Waiter Panel</span>
          </a>
        </Link>
      )}
    </nav>
  );
}
```

## Step 3: Complete Route Mapping

### Create `utils/routeMapping.js` to document all your routes:

```javascript
// utils/routeMapping.js - Complete route mapping for your system

export const ROUTE_MAPPING = {
  // Frontend Routes → Backend API Endpoints
  
  // AUTHENTICATION
  '/login': {
    backend: '/api/auth/token/',
    method: 'POST',
    description: 'User login with JWT token'
  },

  // WAITER ROUTES
  '/waiter': {
    backend: [
      '/api/tables/tables/',           // Get all tables
      '/api/tables/orders/'            // Get orders
    ],
    methods: ['GET'],
    description: 'Waiter dashboard - table overview'
  },

  '/waiter/create-order': {
    backend: [
      '/api/tables/tables/',           // Get available tables
      '/api/menu/items/',              // Get menu items
      '/api/tables/orders/'            // Create new order
    ],
    methods: ['GET', 'POST'],
    description: 'Create new table order'
  },

  // KITCHEN ROUTES
  '/kitchen': {
    backend: [
      '/api/tables/kitchen/',                              // Get kitchen orders
      '/api/tables/kitchen/{id}/update_status/',          // Update order status
      '/api/tables/kitchen/summary/'                      // Kitchen summary stats
    ],
    methods: ['GET', 'POST'],
    description: 'Kitchen display for order management'
  },

  // ADMIN ROUTES
  '/admin/dashboard': {
    backend: [
      '/api/bills/summary/',           // Bill analytics
      '/api/tables/tables/dashboard_summary/',  // Table stats
    ],
    methods: ['GET'],
    description: 'Admin dashboard with analytics'
  },

  '/admin/restaurant-orders': {
    backend: '/api/bills/summary/?type=restaurant',
    methods: ['GET'],
    description: 'Restaurant order history'
  },

  '/admin/manage-menu': {
    backend: [
      '/api/menu/items/',              // Menu items CRUD
      '/api/menu/categories/'          // Categories CRUD
    ],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    description: 'Menu management'
  },

  '/admin/manage-rooms': {
    backend: '/api/rooms/',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    description: 'Room management'
  },

  '/admin/inventory': {
    backend: [
      '/api/inventory/categories/',    // Inventory categories
      '/api/inventory/entries/'       // Inventory entries
    ],
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    description: 'Inventory management'
  },

  // STAFF ROUTES
  '/staff/restaurant-billing': {
    backend: '/api/bills/create/restaurant/',
    methods: ['POST'],
    description: 'Create restaurant bills'
  },

  '/staff/room-billing': {
    backend: '/api/bills/create/room/',
    methods: ['POST'],
    description: 'Create room bills'
  },

  '/staff/bill-history': {
    backend: '/api/bills/history/',
    methods: ['GET'],
    description: 'View billing history'
  },

  // SHARED ROUTES
  '/menu-management': {
    backend: [
      '/api/menu/items/',
      '/api/menu/categories/'
    ],
    methods: ['GET'],
    description: 'Menu browsing (shared)'
  }
};

// Route permissions mapping
export const ROUTE_PERMISSIONS = {
  '/admin/*': ['admin'],
  '/staff/*': ['admin', 'staff'],
  '/waiter/*': ['admin', 'staff', 'waiter'],
  '/kitchen': ['admin', 'staff'],
  '/bills/*': ['admin', 'staff', 'biller']
};

// API endpoint to frontend route mapping
export const API_TO_ROUTE_MAPPING = {
  // Tables API
  '/api/tables/tables/': ['/waiter', '/admin/dashboard'],
  '/api/tables/orders/': ['/waiter/create-order', '/admin/restaurant-orders'],
  '/api/tables/kitchen/': ['/kitchen'],
  
  // Menu API
  '/api/menu/items/': ['/waiter/create-order', '/admin/manage-menu', '/staff/restaurant-billing'],
  '/api/menu/categories/': ['/admin/manage-menu', '/staff/restaurant-billing'],
  
  // Bills API
  '/api/bills/create/restaurant/': ['/staff/restaurant-billing'],
  '/api/bills/create/room/': ['/staff/room-billing'],
  '/api/bills/history/': ['/staff/bill-history', '/admin/analytics'],
  '/api/bills/summary/': ['/admin/dashboard', '/admin/restaurant-orders'],
  
  // Rooms API
  '/api/rooms/': ['/admin/manage-rooms', '/staff/room-billing'],
  
  // Inventory API
  '/api/inventory/categories/': ['/admin/inventory'],
  '/api/inventory/entries/': ['/admin/inventory'],
  
  // Staff API
  '/api/staff/profiles/': ['/admin/manage-staff'],
  '/api/staff/attendance/': ['/admin/manage-staff'],
  
  // Users API
  '/api/users/': ['/admin/manage-staff'],
  '/api/auth/token/': ['/login']
};

export default ROUTE_MAPPING;
```

## Step 4: Update Role-based Routing in AuthContext

### Update `context/AuthContext.js` to handle all role routing:

```javascript
// In context/AuthContext.js - update the login function
const login = ({ access, role, email, username }) => {
  localStorage.setItem("access", access);
  localStorage.setItem("role", role);
  localStorage.setItem("email", email);
  localStorage.setItem("username", username);
  
  setUser({ access, role, email, username });

  // Enhanced role-based routing
  switch (role) {
    case "admin":
      router.push("/admin/dashboard");
      break;
    case "staff":
      router.push("/staff/dashboard");
      break;
    case "waiter":
      router.push("/waiter");
      break;
    case "biller":
      router.push("/staff/restaurant-billing");
      break;
    default:
      router.push("/dashboard");
  }
};
```

## Step 5: Test All Routes

### Create a simple route tester page `pages/test-routes.js`:

```jsx
// pages/test-routes.js
import { useState } from 'react';
import { useAuth } from '@/context/AuthContext';
import { ROUTE_MAPPING } from '@/utils/routeMapping';

export default function RouteTest() {
  const { user } = useAuth();
  const [testResults, setTestResults] = useState({});

  const testRoute = async (route, apiEndpoints) => {
    if (!user?.access) return;
    
    const results = {};
    
    for (const endpoint of apiEndpoints) {
      try {
        const response = await fetch(endpoint, {
          headers: { Authorization: `Bearer ${user.access}` }
        });
        
        results[endpoint] = {
          status: response.status,
          success: response.ok,
          statusText: response.statusText
        };
      } catch (error) {
        results[endpoint] = {
          status: 'ERROR',
          success: false,
          statusText: error.message
        };
      }
    }
    
    setTestResults(prev => ({
      ...prev,
      [route]: results
    }));
  };

  if (!user) return <div>Please login to test routes</div>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Route & API Testing</h1>
      <p className="mb-4">User: {user.email} | Role: {user.role}</p>
      
      {Object.entries(ROUTE_MAPPING).map(([route, config]) => (
        <div key={route} className="mb-4 p-4 border rounded">
          <div className="flex justify-between items-center mb-2">
            <h3 className="font-bold">{route}</h3>
            <button
              onClick={() => testRoute(route, Array.isArray(config.backend) ? config.backend : [config.backend])}
              className="bg-blue-500 text-white px-3 py-1 rounded"
            >
              Test APIs
            </button>
          </div>
          <p className="text-sm text-gray-600 mb-2">{config.description}</p>
          
          {testResults[route] && (
            <div className="mt-2">
              {Object.entries(testResults[route]).map(([endpoint, result]) => (
                <div key={endpoint} className={`text-sm p-2 rounded mb-1 ${result.success ? 'bg-green-100' : 'bg-red-100'}`}>
                  <strong>{endpoint}</strong>: {result.status} - {result.statusText}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}
```

## Step 6: Quick Setup Commands

Run these in your terminal:

```bash
# 1. Create kitchen directory
mkdir -p pages/kitchen

# 2. Create kitchen index file
# (Copy the kitchen display code above into pages/kitchen/index.js)

# 3. Create utils directory if it doesn't exist
mkdir -p utils

# 4. Add route mapping file
# (Copy the routeMapping.js code above)

# 5. Test the implementation
npm run dev
```

## Summary of Complete Route Implementation:

✅ **Kitchen Display**: `/kitchen` → Kitchen order management  
✅ **Waiter Interface**: `/waiter` → Table selection and orders  
✅ **Order Creation**: `/waiter/create-order` → Menu-based ordering  
✅ **Admin Management**: `/admin/*` → All administrative functions  
✅ **Staff Operations**: `/staff/*` → Billing and operations  
✅ **Route Mapping**: Complete API ↔ Frontend mapping documented  

Your system now has **complete route coverage** with proper role-based access control! ߚ
