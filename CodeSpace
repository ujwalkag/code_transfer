# Navigate to your frontend directory
cd ~/hotel-management-frontend/hotel-management-frontend

# Create the PWA manifest file
cat > public/manifest.json << 'EOF'
{
  "name": "Hotel Management System",
  "short_name": "HotelPOS",
  "description": "Restaurant Order Management System",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "scope": "/",
  "icons": [
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icon-512.png", 
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ],
  "categories": ["business", "productivity"],
  "lang": "en"
}
EOF

echo "✅ PWA manifest created!"

////////////////////////////////////////////
# Create simple placeholder icons (we'll create proper ones after testing)
# For now, let's create basic colored squares

# Create 192x192 icon (simple approach using ImageMagick if available)
# If ImageMagick not available, we'll create placeholder HTML icons

# Check if convert command exists
if command -v convert >/dev/null 2>&1; then
    # Create icons using ImageMagick
    convert -size 192x192 xc:'#3B82F6' -gravity center -pointsize 60 -fill white -annotate +0+0 'H' public/icon-192.png
    convert -size 512x512 xc:'#3B82F6' -gravity center -pointsize 160 -fill white -annotate +0+0 'H' public/icon-512.png
    echo "✅ PWA icons created using ImageMagick!"
else
    # Create simple fallback approach - we'll add proper icons later
    echo "⚠️  ImageMagick not found. We'll use default favicon for now."
    echo "You can add proper icons later to public/icon-192.png and public/icon-512.png"
    
    # Copy existing favicon if it exists, otherwise create placeholder
    if [ -f "public/favicon.ico" ]; then
        cp public/favicon.ico public/icon-192.png
        cp public/favicon.ico public/icon-512.png
    else
        # Create empty placeholder files
        touch public/icon-192.png
        touch public/icon-512.png
    fi
fi
///////////////////////////////////////////////////////
# Create the _document.js file for PWA meta tags
cat > pages/_document.js << 'EOF'
import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          {/* PWA Manifest */}
          <link rel="manifest" href="/manifest.json" />
          
          {/* PWA Meta Tags */}
          <meta name="theme-color" content="#3B82F6" />
          <meta name="apple-mobile-web-app-capable" content="yes" />
          <meta name="apple-mobile-web-app-status-bar-style" content="default" />
          <meta name="apple-mobile-web-app-title" content="HotelPOS" />
          
          {/* PWA Icons */}
          <link rel="apple-touch-icon" href="/icon-192.png" />
          <link rel="icon" type="image/png" sizes="192x192" href="/icon-192.png" />
          <link rel="icon" type="image/png" sizes="512x512" href="/icon-512.png" />
          
          {/* Mobile Optimization */}
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
          <meta name="mobile-web-app-capable" content="yes" />
          
          {/* Prevent zoom on iOS */}
          <meta name="format-detection" content="telephone=no" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;
EOF

echo "✅ PWA document headers created!"
//////////////////////////////////////////////////////
# Backup current next.config.js
cp next.config.js next.config.js.backup

# Update next.config.js with PWA headers
cat > next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  
  // PWA Configuration
  async headers() {
    return [
      {
        // Serve manifest with correct content-type
        source: '/manifest.json',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/json',
          },
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      {
        // Cache PWA icons
        source: '/icon-:size.png',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
  
  // Ensure images are optimized
  images: {
    domains: [],
    formats: ['image/webp', 'image/avif'],
  },
  
  // PWA offline support preparation
  experimental: {
    // Enable if you want service worker later
    // serverComponents: true,
  }
};

module.exports = nextConfig;
EOF

echo "✅ Next.js config updated for PWA!"
////////////////////////////////////////////////
# Create waiter pages directory
mkdir -p pages/waiter

# Create waiter index page
cat > pages/waiter/index.js << 'EOF'
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import Link from 'next/link';

function WaiterDashboard() {
  const { user, logout } = useAuth();
  const [tables, setTables] = useState([]);
  const [myOrders, setMyOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Use existing APIs - no backend changes needed
      const [tablesRes, ordersRes] = await Promise.all([
        fetch('/api/tables/tables/', {
          headers: { Authorization: `Bearer ${user?.access}` }
        }),
        fetch('/api/tables/orders/', {
          headers: { Authorization: `Bearer ${user?.access}` }
        })
      ]);

      if (tablesRes.ok) {
        const tablesData = await tablesRes.json();
        setTables(tablesData || []);
      }

      if (ordersRes.ok) {
        const ordersData = await ordersRes.json();
        // For now, show all orders (we'll filter by waiter later)
        setMyOrders(ordersData || []);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-blue-800">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-blue-50">
      {/* Mobile-First Header */}
      <div className="bg-blue-600 text-white p-4 sticky top-0 z-10 shadow-lg">
        <div className="flex justify-between items-center max-w-sm mx-auto">
          <div>
            <h1 className="text-xl font-bold">ߍ️ Waiter Panel</h1>
            <p className="text-blue-100 text-sm">{user?.email}</p>
          </div>
          <button 
            onClick={logout}
            className="bg-red-500 hover:bg-red-600 px-3 py-2 rounded text-sm font-medium"
          >
            Logout
          </button>
        </div>
      </div>

      <div className="p-4 max-w-sm mx-auto pb-20">
        {/* Quick Stats */}
        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="bg-white p-4 rounded-xl shadow-md text-center">
            <div className="text-3xl text-green-600 font-bold mb-1">
              {tables.filter(t => !t.is_occupied).length}
            </div>
            <div className="text-sm text-gray-600">Available Tables</div>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-md text-center">
            <div className="text-3xl text-orange-600 font-bold mb-1">
              {myOrders.filter(o => o.status === 'pending').length}
            </div>
            <div className="text-sm text-gray-600">Pending Orders</div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mb-6">
          <Link 
            href="/waiter/create-order"
            className="block bg-green-600 text-white p-6 rounded-xl text-center shadow-lg hover:bg-green-700 active:bg-green-800 transition-colors"
          >
            <div className="text-4xl mb-2">➕</div>
            <div className="text-xl font-bold mb-1">Create New Order</div>
            <div className="text-green-100 text-sm">Select table and add items</div>
          </Link>
        </div>

        {/* Available Tables */}
        <div className="bg-white rounded-xl p-4 mb-6 shadow-md">
          <h3 className="font-bold mb-4 text-gray-800 text-lg">Available Tables</h3>
          <div className="grid grid-cols-3 gap-3">
            {tables
              .filter(table => !table.is_occupied)
              .slice(0, 9)
              .map(table => (
              <button
                key={table.id}
                onClick={() => window.location.href = `/waiter/create-order?table=${table.id}`}
                className="bg-green-50 border-2 border-green-200 p-4 rounded-lg text-center hover:bg-green-100 active:bg-green-200 transition-colors"
              >
                <div className="text-lg font-bold text-green-800">
                  T{table.table_number}
                </div>
                <div className="text-xs text-green-600">
                  {table.capacity} seats
                </div>
              </button>
            ))}
          </div>
          
          {tables.filter(t => !t.is_occupied).length === 0 && (
            <div className="text-center py-8">
              <div className="text-4xl mb-2">ߔ</div>
              <p className="text-gray-500">All tables are occupied</p>
            </div>
          )}
        </div>

        {/* Recent Orders */}
        <div className="bg-white rounded-xl p-4 shadow-md">
          <h3 className="font-bold mb-4 text-gray-800 text-lg">Recent Orders</h3>
          {myOrders.slice(0, 5).map((order, index) => (
            <div key={order.id || index} className="border-b border-gray-100 pb-3 mb-3 last:border-b-0 last:mb-0">
              <div className="flex justify-between items-start">
                <div>
                  <div className="font-medium text-gray-900">
                    Table {order.table_number || order.table}
                  </div>
                  <div className="text-sm text-gray-600">
                    Order #{order.order_number || 'N/A'}
                  </div>
                  <div className="text-sm text-gray-500">
                    ₹{parseFloat(order.total_amount || 0).toFixed(0)}
                  </div>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                  order.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                  order.status === 'completed' ? 'bg-green-100 text-green-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {order.status || 'pending'}
                </span>
              </div>
            </div>
          ))}
          
          {myOrders.length === 0 && (
            <div className="text-center py-8">
              <div className="text-4xl mb-2">ߓ</div>
              <p className="text-gray-500">No orders yet</p>
              <p className="text-gray-400 text-sm mt-1">Create your first order above</p>
            </div>
          )}
        </div>
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg">
        <div className="grid grid-cols-3 max-w-sm mx-auto">
          <Link href="/waiter" className="p-4 text-center text-blue-600">
            <div className="text-2xl mb-1">ߏ</div>
            <div className="text-xs font-medium">Home</div>
          </Link>
          <Link href="/waiter/create-order" className="p-4 text-center text-gray-600 hover:text-green-600">
            <div className="text-2xl mb-1">➕</div>
            <div className="text-xs font-medium">New Order</div>
          </Link>
          <Link href="/waiter/orders" className="p-4 text-center text-gray-600 hover:text-blue-600">
            <div className="text-2xl mb-1">ߓ</div>
            <div className="text-xs font-medium">My Orders</div>
          </Link>
        </div>
      </div>
    </div>
  );
}

// Allow access to admin, staff, and waiter roles for testing
export default withRoleGuard(WaiterDashboard, ['admin', 'staff', 'waiter']);
EOF

echo "✅ Waiter dashboard page created!"
//////////////////////////////////////////////////////
# Create order creation page
cat > pages/waiter/create-order.js << 'EOF'
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import { useRouter } from 'next/router';
import Link from 'next/link';

function CreateOrder() {
  const { user } = useAuth();
  const router = useRouter();
  const [selectedTable, setSelectedTable] = useState(router.query.table || '');
  const [tables, setTables] = useState([]);
  const [menuItems, setMenuItems] = useState([]);
  const [orderItems, setOrderItems] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [tablesRes, menuRes] = await Promise.all([
        fetch('/api/tables/tables/', {
          headers: { Authorization: `Bearer ${user?.access}` }
        }),
        fetch('/api/menu/items/', {
          headers: { Authorization: `Bearer ${user?.access}` }
        })
      ]);

      if (tablesRes.ok) {
        const tablesData = await tablesRes.json();
        setTables(tablesData || []);
      }

      if (menuRes.ok) {
        const menuData = await menuRes.json();
        setMenuItems(menuData || []);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const addToOrder = (menuItem) => {
    const existingItem = orderItems.find(item => item.menu_item.id === menuItem.id);
    
    if (existingItem) {
      setOrderItems(orderItems.map(item =>
        item.menu_item.id === menuItem.id
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setOrderItems([...orderItems, {
        menu_item: menuItem,
        quantity: 1,
        price: menuItem.price
      }]);
    }
  };

  const updateQuantity = (menuItemId, newQuantity) => {
    if (newQuantity <= 0) {
      setOrderItems(orderItems.filter(item => item.menu_item.id !== menuItemId));
    } else {
      setOrderItems(orderItems.map(item =>
        item.menu_item.id === menuItemId
          ? { ...item, quantity: newQuantity }
          : item
      ));
    }
  };

  const calculateTotal = () => {
    return orderItems.reduce((total, item) => 
      total + (item.quantity * item.price), 0
    );
  };

  const submitOrder = async () => {
    if (!selectedTable || orderItems.length === 0) {
      alert('Please select a table and add items');
      return;
    }

    try {
      const orderData = {
        table: selectedTable,
        customer_name: 'Guest',
        customer_count: 1,
        items: orderItems.map(item => ({
          menu_item: item.menu_item.id,
          quantity: item.quantity,
          special_instructions: ''
        }))
      };

      const response = await fetch('/api/tables/orders/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user?.access}`
        },
        body: JSON.stringify(orderData)
      });

      if (response.ok) {
        const result = await response.json();
        alert(`Order created successfully! Order #${result.order_number}`);
        router.push('/waiter');
      } else {
        const error = await response.json();
        alert('Error creating order: ' + JSON.stringify(error));
      }
    } catch (error) {
      console.error('Error creating order:', error);
      alert('Network error creating order');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Loading menu...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm p-4 sticky top-0 z-10">
        <div className="flex items-center justify-between max-w-sm mx-auto">
          <Link href="/waiter" className="text-blue-600 text-sm">← Back</Link>
          <h1 className="text-lg font-bold">Create Order</h1>
          <div></div>
        </div>
      </div>

      <div className="p-4 max-w-sm mx-auto pb-24">
        {/* Table Selection */}
        <div className="bg-white rounded-lg p-4 mb-4 shadow-sm">
          <label className="block font-medium mb-2">Select Table *</label>
          <select
            value={selectedTable}
            onChange={(e) => setSelectedTable(e.target.value)}
            className="w-full p-3 border rounded-lg text-lg"
          >
            <option value="">Choose Table</option>
            {tables.filter(t => !t.is_occupied).map(table => (
              <option key={table.id} value={table.id}>
                Table {table.table_number} ({table.capacity} seats)
              </option>
            ))}
          </select>
        </div>

        {/* Menu Items */}
        <div className="bg-white rounded-lg p-4 mb-4 shadow-sm">
          <h3 className="font-bold mb-3">Menu Items</h3>
          <div className="space-y-3">
            {menuItems.map(item => (
              <div key={item.id} className="flex justify-between items-center p-3 border rounded-lg">
                <div className="flex-1">
                  <div className="font-medium">{item.name_en}</div>
                  <div className="text-sm text-gray-600">{item.name_hi}</div>
                  <div className="text-green-600 font-bold">₹{item.price}</div>
                </div>
                <button
                  onClick={() => addToOrder(item)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                >
                  Add
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Order Summary */}
        {orderItems.length > 0 && (
          <div className="bg-white rounded-lg p-4 shadow-sm">
            <h3 className="font-bold mb-3">Order Summary</h3>
            <div className="space-y-2 mb-4">
              {orderItems.map(item => (
                <div key={item.menu_item.id} className="flex justify-between items-center">
                  <div>
                    <div className="font-medium">{item.menu_item.name_en}</div>
                    <div className="text-sm text-gray-600">₹{item.price} each</div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => updateQuantity(item.menu_item.id, item.quantity - 1)}
                      className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center"
                    >
                      −
                    </button>
                    <span className="w-8 text-center">{item.quantity}</span>
                    <button
                      onClick={() => updateQuantity(item.menu_item.id, item.quantity + 1)}
                      className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center"
                    >
                      +
                    </button>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="border-t pt-3">
              <div className="flex justify-between items-center text-lg font-bold">
                <span>Total:</span>
                <span>₹{calculateTotal().toFixed(0)}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Bottom Action */}
      {orderItems.length > 0 && (
        <div className="fixed bottom-0 left-0 right-0 bg-white p-4 shadow-lg border-t">
          <div className="max-w-sm mx-auto">
            <button
              onClick={submitOrder}
              disabled={!selectedTable || orderItems.length === 0}
              className="w-full bg-green-600 text-white py-4 rounded-lg text-lg font-bold hover:bg-green-700 disabled:bg-gray-400"
            >
              Place Order (₹{calculateTotal().toFixed(0)})
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default withRoleGuard(CreateOrder, ['admin', 'staff', 'waiter']);
EOF

echo "✅ Order creation page created!"
////////////////////////////////////////////////////
# Build the application to test PWA features
echo "ߔ Building application with PWA features..."
npm run build

echo "ߚ Starting application for testing..."
echo ""
echo "✅ PWA Setup Complete!"
echo ""
echo "ߓ To test PWA features:"
echo "1. Run: npm start"
echo "2. Open http://localhost:3000 in mobile Chrome/Safari"
echo "3. Look for 'Add to Home Screen' prompt"
echo "4. Test waiter interface at http://localhost:3000/waiter"
echo ""
echo "ߔ Next Steps:"
echo "- Test waiter interface with your existing data"
echo "- Add proper PWA icons (192x192 and 512x512 PNG)"
echo "- Test on actual mobile devices"
echo ""

# Start the application
echo "Starting the application..."
npm start
