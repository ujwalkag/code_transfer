# SSH to your server
ssh ubuntu@your-server
cd /home/ubuntu/hotel-management-backend
source venv/bin/activate

# Create comprehensive backup
python manage.py dumpdata > full_backup_$(date +%Y%m%d_%H%M%S).json

# Create app-specific backups (safer for restoration)
python manage.py dumpdata users > users_backup.json
python manage.py dumpdata menu > menu_backup.json  
python manage.py dumpdata rooms > rooms_backup.json
python manage.py dumpdata bills > bills_backup.json
python manage.py dumpdata staff > staff_backup.json
python manage.py dumpdata inventory > inventory_backup.json

echo "✅ Data backup complete"
///////////////////
# Remove all migration files (keeps __init__.py)
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc" -delete

# Verify removal
echo "Migration files removed from these apps:"
ls -la apps/*/migrations/
///////////////////////////////
# Create migrations in dependency order

echo "ߓ Creating base app migrations..."
python manage.py makemigrations users
python manage.py makemigrations core

echo "ߓ Creating independent app migrations..."
python manage.py makemigrations menu
python manage.py makemigrations rooms  
python manage.py makemigrations inventory
python manage.py makemigrations notifications

echo "ߓ Creating dependent app migrations..."
python manage.py makemigrations staff    # depends on users
python manage.py makemigrations tables   # depends on users, menu  
python manage.py makemigrations bills    # depends on users, rooms, menu

echo "✅ Fresh migrations created for all apps"
/////////////////////////////////////////////////////
# Option A: If database exists but has schema issues
echo "ߔ Applying migrations with fake-initial..."
python manage.py migrate users --fake-initial
python manage.py migrate core --fake-initial
python manage.py migrate menu --fake-initial
python manage.py migrate rooms --fake-initial
python manage.py migrate inventory --fake-initial
python manage.py migrate notifications --fake-initial
python manage.py migrate staff --fake-initial
python manage.py migrate tables --fake-initial
python manage.py migrate bills --fake-initial

# Apply any remaining migrations
python manage.py migrate

# Option B: If you want completely fresh database (⚠️ DELETES ALL DATA)
# rm -f db.sqlite3  # Only if using SQLite
# python manage.py migrate
////////////////////////////////////////////////////////////
# Check migration status
python manage.py showmigrations

# Test database connectivity
python manage.py shell << 'EOF'
from apps.users.models import CustomUser
from apps.staff.models import StaffProfile, AttendanceRecord  
from apps.tables.models import RestaurantTable, TableOrder, OrderItem
from apps.bills.models import Bill, BillItem
from apps.menu.models import MenuItem
from apps.rooms.models import Room

print("✅ All models imported successfully")
print("User count:", CustomUser.objects.count())
print("Menu items:", MenuItem.objects.count())
print("Tables:", RestaurantTable.objects.count())
EOF

# Restart services
sudo systemctl restart gunicorn
sudo systemctl restart nginx

echo "ߎ Migration reset complete!"
////////////////////////////////////////////////////////
# If you get "table already exists" errors:
python manage.py migrate --fake-initial

# If you get foreign key constraint errors:
python manage.py migrate --fake
python manage.py makemigrations --merge
python manage.py migrate

# If specific app has issues:
python manage.py migrate staff --fake
python manage.py migrate tables --fake  
python manage.py migrate bills --fake

# Check what tables actually exist in database:
python manage.py dbshell << 'EOF'
.tables  -- For SQLite
-- SELECT tablename FROM pg_tables WHERE schemaname='public';  -- For PostgreSQL
.exit
EOF
/////////////////////////////////////////////////////////

# After successful migration, restore your data:
python manage.py loaddata users_backup.json
python manage.py loaddata menu_backup.json
python manage.py loaddata rooms_backup.json
# ... etc for other apps

# Or restore everything at once:
python manage.py loaddata full_backup_TIMESTAMP.json
//////////////////////////////////////////////////////////////
# Nuclear option - complete reset
rm -f db.sqlite3
find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
python manage.py makemigrations users core menu rooms inventory notifications staff tables bills
python manage.py migrate
python manage.py createsuperuser --email admin@hotel.com
///////////////////////////////////////////////////////////////////
# Test 1: Check if Django corruption is FIXED
python -c "
import django
print('✅ Django version:', django.get_version())
from django.db import migrations  
print('✅ Migrations module working')
"

# Test 2: Test Django management commands
python manage.py check

# Test 3: Check migration status (this should work now)
python manage.py showmigrations

# Test 4: Try creating migrations (the moment of truth!)
python manage.py makemigrations
//////////////////////
# Test if ReportLab works for PDF generation
python -c "
import reportlab
from reportlab.pdfgen import canvas
print('✅ ReportLab working - perfect for PDF bills')
"
////# Install system dependencies (only if really needed)
sudo apt-get update
sudo apt-get install -y pkg-config libcairo2-dev python3-dev
pip install xhtml2pdf==0.2.13

///////////
python -c "
import django
print('Django version:', django.get_version()) 
from django.db import migrations
print('✅ Migrations module working')
from django.core.management import execute_from_command_line
print('✅ Management commands available')
import reportlab  
print('✅ ReportLab available for PDFs')
print('ߎ Django corruption FIXED!')
"
//////////////
>>> import django
>>> print('Django version:', django.get_version())
Django version: 4.2.7
>>> from django.db import migrations
print('✅ Migrations module working')
from django.core.management import execute_from_command_line
print('✅ Management commands available')
import reportlab
print('✅ ReportLab available for PDFs')
print('ߎ Django corruption FIXED!')
">>> print('✅ Migrations module working')
✅ Migrations module working
>>> from django.core.management import execute_from_command_line
>>> print('✅ Management commands available')
✅ Management commands available
>>> import reportlab
>>> print('✅ ReportLab available for PDFs')
✅ ReportLab available for PDFs
>>> print('ߎ Django corruption FIXED!')
ߎ Django corruption FIXED!
>>> "
  File "<stdin>", line 1
    "
    ^
SyntaxError: unterminated string literal (detected at line 1)
>>> import django
>>> print('Django version:', django.get_version())
Django version: 4.2.7
>>> from django.db import migrations
>>> print('✅ Migrations module working')
✅ Migrations module working
>>> from django.core.management import execute_from_command_line
>>> print('✅ Management commands available')
✅ Management commands available
>>> import reportlab
>>> print('✅ ReportLab available for PDFs')
✅ ReportLab available for PDFs
>>> print('ߎ Django corruption FIXED!')import django
  File "<stdin>", line 1
    print('ߎ Django corruption FIXED!')import django
                                       ^^^^^^
SyntaxError: invalid syntax
>>> print('✅ Django version:', django.get_version())
✅ Django version: 4.2.7
>>> from django.db import migrations
>>> print('✅ Migrations module working')
✅ Migrations module working
>>> import django
>>> print('✅ Django version:', django.get_version())
✅ Django version: 4.2.7
>>> from django.db import migrations
>>> print('✅ Migrations module working')
✅ Migrations module working
>>>
KeyboardInterrupt
>>>
(venv) ubuntu@hotel-management-server:~/hotel-management-backend$ python manage.py check
Traceback (most recent call last):
  File "/home/ubuntu/hotel-management-backend/manage.py", line 20, in <module>
    main()
  File "/home/ubuntu/hotel-management-backend/manage.py", line 17, in main
    execute_from_command_line(sys.argv)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/__init__.py", line 442, in execute_from_command_line
    utility.execute()
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/__init__.py", line 436, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/base.py", line 412, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/base.py", line 458, in execute
    output = self.handle(*args, **options)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/commands/check.py", line 76, in handle
    self.check(
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/management/base.py", line 485, in check
    all_issues = checks.run_checks(
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/checks/registry.py", line 88, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/checks/urls.py", line 14, in check_url_config
    return check_resolver(resolver)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/core/checks/urls.py", line 24, in check_resolver
    return check_method()
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/urls/resolvers.py", line 494, in check
    for pattern in self.url_patterns:
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/utils/functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/urls/resolvers.py", line 715, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/utils/functional.py", line 57, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/urls/resolvers.py", line 708, in urlconf_module
    return import_module(self.urlconf_name)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/home/ubuntu/hotel-management-backend/config/urls.py", line 15, in <module>
    path('api/bills/', include('apps.bills.urls')),
  File "/home/ubuntu/hotel-management-backend/venv/lib/python3.10/site-packages/django/urls/conf.py", line 38, in include
    urlconf_module = import_module(urlconf_module)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/home/ubuntu/hotel-management-backend/apps/bills/urls.py", line 2, in <module>
    from . import views
  File "/home/ubuntu/hotel-management-backend/apps/bills/views.py", line 20, in <module>
    from .notifications import notify_admin_via_whatsapp
  File "/home/ubuntu/hotel-management-backend/apps/bills/notifications.py", line 5, in <module>
    from twilio.rest import Client
ModuleNotFoundError: No module named 'twilio'
(venv) ubuntu@hotel-management-server:~/hotel-management-backend$

