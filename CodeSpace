from django.db import models
from apps.users.models import CustomUser
from decimal import Decimal

class InventoryCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

    class Meta:
        db_table = 'inventory_category'
        verbose_name_plural = 'Inventory Categories'

class InventoryItem(models.Model):
    UNIT_CHOICES = (
        ('kg', 'Kilogram'),
        ('ltr', 'Liter'), 
        ('pcs', 'Pieces'),
        ('box', 'Box'),
        ('bottle', 'Bottle'),
        ('packet', 'Packet'),
    )

    category = models.ForeignKey(InventoryCategory, on_delete=models.CASCADE, related_name='items')
    name = models.CharField(max_length=200)
    unit = models.CharField(max_length=10, choices=UNIT_CHOICES)
    current_stock = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    min_stock_level = models.DecimalField(max_digits=10, decimal_places=2, default=10)
    max_stock_level = models.DecimalField(max_digits=10, decimal_places=2, default=1000)
    cost_per_unit = models.DecimalField(max_digits=10, decimal_places=2)
    last_updated = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True)

    @property
    def is_low_stock(self):
        return self.current_stock <= self.min_stock_level

    @property
    def total_value(self):
        return self.current_stock * self.cost_per_unit

    @property
    def stock_status(self):
        if self.current_stock <= 0:
            return "Out of Stock"
        elif self.is_low_stock:
            return "Low Stock"
        else:
            return "In Stock"

    def __str__(self):
        return f"{self.name} ({self.current_stock} {self.unit})"

    class Meta:
        db_table = 'inventory_item'

class StockMovement(models.Model):
    MOVEMENT_TYPES = (
        ('in', 'Stock In'),
        ('out', 'Stock Out'),
        ('adjustment', 'Adjustment'),
        ('waste', 'Waste/Damage'),
    )

    item = models.ForeignKey(InventoryItem, on_delete=models.CASCADE, related_name='movements')
    movement_type = models.CharField(max_length=20, choices=MOVEMENT_TYPES)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)
    cost_per_unit = models.DecimalField(max_digits=10, decimal_places=2)
    supplier_name = models.CharField(max_length=200, blank=True)
    invoice_number = models.CharField(max_length=100, blank=True)
    date = models.DateTimeField(auto_now_add=True)
    reference = models.CharField(max_length=200, blank=True)
    notes = models.TextField(blank=True)
    recorded_by = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True)

    @property
    def total_cost(self):
        return self.quantity * self.cost_per_unit

    def __str__(self):
        return f"{self.movement_type} - {self.item.name} - {self.quantity}"

    class Meta:
        db_table = 'inventory_stock_movement'
