# apps/inventory/models.py
from django.db import models
from apps.users.models import CustomUser
from decimal import Decimal
from django.utils import timezone

class InventoryCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    @property
    def total_entries(self):
        return self.entries.count()

    @property
    def total_spent(self):
        return self.entries.aggregate(
            total=models.Sum('total_cost')
        )['total'] or Decimal('0.00')

    class Meta:
        db_table = 'inventory_category'
        verbose_name = 'Inventory Category'
        verbose_name_plural = 'Inventory Categories'
        ordering = ['name']

class InventoryEntry(models.Model):
    category = models.ForeignKey(
        InventoryCategory, 
        on_delete=models.CASCADE, 
        related_name='entries'
    )
    item_name = models.CharField(max_length=200)
    price_per_unit = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)
    total_cost = models.DecimalField(max_digits=12, decimal_places=2)
    purchase_date = models.DateField()
    supplier_name = models.CharField(max_length=200)
    notes = models.TextField(blank=True)
    created_by = models.ForeignKey(
        CustomUser, 
        on_delete=models.SET_NULL, 
        null=True
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        # Auto-calculate total cost
        self.total_cost = self.price_per_unit * self.quantity
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.item_name} - {self.category.name} - ₹{self.total_cost}"

    class Meta:
        db_table = 'inventory_entry'
        verbose_name = 'Inventory Entry'
        verbose_name_plural = 'Inventory Entries'
        ordering = ['-created_at']
//////////////////////
# apps/inventory/serializers.py
from rest_framework import serializers
from .models import InventoryCategory, InventoryEntry
from datetime import datetime, date

class InventoryCategorySerializer(serializers.ModelSerializer):
    total_entries = serializers.ReadOnlyField()
    total_spent = serializers.ReadOnlyField()

    class Meta:
        model = InventoryCategory
        fields = [
            'id', 'name', 'description', 'is_active', 
            'total_entries', 'total_spent', 'created_at'
        ]
        read_only_fields = ['created_at']

    def validate_name(self, value):
        if not value.strip():
            raise serializers.ValidationError("Category name is required")
        return value.strip().title()

class InventoryEntrySerializer(serializers.ModelSerializer):
    category_name = serializers.CharField(source='category.name', read_only=True)
    created_by_name = serializers.CharField(source='created_by.email', read_only=True)

    class Meta:
        model = InventoryEntry
        fields = [
            'id', 'category', 'category_name', 'item_name', 
            'price_per_unit', 'quantity', 'total_cost', 
            'purchase_date', 'supplier_name', 'notes',
            'created_by_name', 'created_at'
        ]
        read_only_fields = ['total_cost', 'created_by_name', 'created_at']

    def validate_item_name(self, value):
        if not value.strip():
            raise serializers.ValidationError("Item name is required")
        return value.strip().title()

    def validate_price_per_unit(self, value):
        if value <= 0:
            raise serializers.ValidationError("Price must be greater than 0")
        return value

    def validate_quantity(self, value):
        if value <= 0:
            raise serializers.ValidationError("Quantity must be greater than 0")
        return value

    def validate_supplier_name(self, value):
        if not value.strip():
            raise serializers.ValidationError("Supplier name is required")
        return value.strip().title()

class InventoryReportSerializer(serializers.Serializer):
    """For monthly reports"""
    month = serializers.CharField()
    year = serializers.CharField()
    total_spent = serializers.DecimalField(max_digits=12, decimal_places=2)
    total_entries = serializers.IntegerField()
    categories_data = serializers.JSONField()
    top_suppliers = serializers.JSONField()


///////////////////////////////////////////////
# apps/inventory/views.py
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db.models import Sum, Count, Q
from django.db.models.functions import TruncMonth
from datetime import datetime, date
from decimal import Decimal

from .models import InventoryCategory, InventoryEntry
from .serializers import (
    InventoryCategorySerializer, 
    InventoryEntrySerializer,
    InventoryReportSerializer
)
from .permissions import IsAdminOnly

class InventoryCategoryViewSet(viewsets.ModelViewSet):
    queryset = InventoryCategory.objects.all()
    serializer_class = InventoryCategorySerializer
    permission_classes = [IsAuthenticated, IsAdminOnly]

    def get_queryset(self):
        queryset = InventoryCategory.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(name__icontains=search)
        
        active_only = self.request.query_params.get('active_only', None)
        if active_only == 'true':
            queryset = queryset.filter(is_active=True)
            
        return queryset.order_by('name')

class InventoryEntryViewSet(viewsets.ModelViewSet):
    queryset = InventoryEntry.objects.all()
    serializer_class = InventoryEntrySerializer
    permission_classes = [IsAuthenticated, IsAdminOnly]

    def get_queryset(self):
        queryset = InventoryEntry.objects.select_related('category', 'created_by').all()
        
        # Filter by category
        category = self.request.query_params.get('category', None)
        if category:
            queryset = queryset.filter(category_id=category)
        
        # Filter by month/year
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        if month and year:
            queryset = queryset.filter(
                purchase_date__month=month,
                purchase_date__year=year
            )
        
        # Filter by date range
        date_from = self.request.query_params.get('date_from', None)
        date_to = self.request.query_params.get('date_to', None)
        if date_from:
            queryset = queryset.filter(purchase_date__gte=date_from)
        if date_to:
            queryset = queryset.filter(purchase_date__lte=date_to)
        
        # Search
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                Q(item_name__icontains=search) |
                Q(supplier_name__icontains=search)
            )
        
        return queryset.order_by('-purchase_date', '-created_at')

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

    @action(detail=False, methods=['get'])
    def monthly_report(self, request):
        """Generate monthly inventory report"""
        try:
            month = request.query_params.get('month', datetime.now().month)
            year = request.query_params.get('year', datetime.now().year)
            
            entries = InventoryEntry.objects.filter(
                purchase_date__month=month,
                purchase_date__year=year
            )
            
            total_spent = entries.aggregate(
                total=Sum('total_cost')
            )['total'] or Decimal('0.00')
            
            total_entries = entries.count()
            
            # Category-wise data
            categories_data = entries.values('category__name').annotate(
                spent=Sum('total_cost'),
                count=Count('id')
            ).order_by('-spent')
            
            # Top suppliers
            top_suppliers = entries.values('supplier_name').annotate(
                spent=Sum('total_cost'),
                count=Count('id')
            ).order_by('-spent')[:10]
            
            report_data = {
                'month': month,
                'year': year,
                'total_spent': total_spent,
                'total_entries': total_entries,
                'categories_data': list(categories_data),
                'top_suppliers': list(top_suppliers)
            }
            
            return Response(report_data)
            
        except Exception as e:
            return Response({
                'error': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=False, methods=['get'])
    def dashboard_stats(self, request):
        """Quick stats for dashboard"""
        try:
            # Current month stats
            current_month = datetime.now().month
            current_year = datetime.now().year
            
            current_month_spent = InventoryEntry.objects.filter(
                purchase_date__month=current_month,
                purchase_date__year=current_year
            ).aggregate(total=Sum('total_cost'))['total'] or Decimal('0.00')
            
            total_categories = InventoryCategory.objects.filter(is_active=True).count()
            
            # Recent entries (last 10)
            recent_entries = InventoryEntry.objects.select_related('category').order_by('-created_at')[:10]
            recent_serializer = InventoryEntrySerializer(recent_entries, many=True)
            
            return Response({
                'current_month_spent': current_month_spent,
                'total_categories': total_categories,
                'recent_entries': recent_serializer.data
            })
            
        except Exception as e:
            return Response({
                'error': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


////////////////////////////////////

# apps/inventory/permissions.py
from rest_framework import permissions

class IsAdminOnly(permissions.BasePermission):
    """
    Custom permission to only allow admin users to access inventory.
    """
    def has_permission(self, request, view):
        return (
            request.user and 
            request.user.is_authenticated and 
            hasattr(request.user, 'role') and
            request.user.role == 'admin'
        )
//////////////////////////////////

# apps/inventory/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'categories', views.InventoryCategoryViewSet, basename='category')
router.register(r'entries', views.InventoryEntryViewSet, basename='entry')

urlpatterns = [
    path('', include(router.urls)),
]

/////////////////////////////////////

# apps/inventory/apps.py
from django.apps import AppConfig

class InventoryConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.inventory'

///////////////////////////////////

cd ~/hotel-management-backend

# Add inventory to INSTALLED_APPS
cat >> config/settings.py << 'EOF'
# Add inventory app
INSTALLED_APPS.append('apps.inventory')
EOF

# Add inventory URLs
sed -i "/path('api\/bills\//a\\    path('api/inventory/', include('apps.inventory.urls'))," config/urls.py

//////////////////////////////////////

source venv/bin/activate

# Create migrations
python manage.py makemigrations inventory

# Apply migrations  
python manage.py migrate inventory

# Restart services
sudo systemctl restart gunicorn
deactivate

///////////////////////////////////
// pages/admin/inventory.js
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import Link from 'next/link';

function AdminInventory() {
  const { user } = useAuth();
  const [entries, setEntries] = useState([]);
  const [categories, setCategories] = useState([]);
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    month: new Date().getMonth() + 1,
    year: new Date().getFullYear(),
    category: ''
  });

  useEffect(() => {
    fetchData();
  }, [filters]);

  const fetchData = async () => {
    try {
      setLoading(true);
      
      const [entriesRes, categoriesRes, statsRes] = await Promise.all([
        fetch(`/api/inventory/entries/?month=${filters.month}&year=${filters.year}&category=${filters.category}`, {
          headers: { Authorization: `Bearer ${user?.access}` }
        }),
        fetch('/api/inventory/categories/?active_only=true', {
          headers: { Authorization: `Bearer ${user?.access}` }
        }),
        fetch('/api/inventory/entries/dashboard_stats/', {
          headers: { Authorization: `Bearer ${user?.access}` }
        })
      ]);

      if (entriesRes.ok) setEntries(await entriesRes.json());
      if (categoriesRes.ok) setCategories(await categoriesRes.json());
      if (statsRes.ok) setStats(await statsRes.json());
      
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const months = [
    { value: 1, name: 'January / जनवरी' },
    { value: 2, name: 'February / फरवरी' },
    { value: 3, name: 'March / मार्च' },
    { value: 4, name: 'April / अप्रैल' },
    { value: 5, name: 'May / मई' },
    { value: 6, name: 'June / जून' },
    { value: 7, name: 'July / जुलाई' },
    { value: 8, name: 'August / अगस्त' },
    { value: 9, name: 'September / सितंबर' },
    { value: 10, name: 'October / अक्टूबर' },
    { value: 11, name: 'November / नवंबर' },
    { value: 12, name: 'December / दिसंबर' }
  ];

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">ߓ Inventory Management / इन्वेंट्री प्रबंधन</h1>
        <div className="flex space-x-3">
          <Link href="/admin/inventory-add-entry" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            ➕ Add Entry / एंट्री जोड़ें
          </Link>
          <Link href="/admin/inventory-categories" className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
            ߓ Categories / श्रेणियाँ
          </Link>
          <Link href="/admin/inventory-reports" className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700">
            ߓ Reports / रिपोर्ट
          </Link>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-sm text-gray-500">Current Month Spent / इस महीने खर्च</h3>
          <p className="text-2xl font-bold text-blue-600">₹{parseFloat(stats.current_month_spent || 0).toLocaleString('en-IN')}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-sm text-gray-500">Total Categories / कुल श्रेणियाँ</h3>
          <p className="text-2xl font-bold text-green-600">{stats.total_categories || 0}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow">
          <h3 className="text-sm text-gray-500">Recent Entries / हाल की एंट्रियां</h3>
          <p className="text-2xl font-bold text-purple-600">{stats.recent_entries?.length || 0}</p>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h3 className="text-lg font-semibold mb-3">Filters / फिल्टर</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <select 
            value={filters.month} 
            onChange={(e) => setFilters({...filters, month: e.target.value})}
            className="border rounded px-3 py-2"
          >
            {months.map(month => (
              <option key={month.value} value={month.value}>{month.name}</option>
            ))}
          </select>
          
          <select 
            value={filters.year} 
            onChange={(e) => setFilters({...filters, year: e.target.value})}
            className="border rounded px-3 py-2"
          >
            {[2024, 2025, 2026].map(year => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
          
          <select 
            value={filters.category} 
            onChange={(e) => setFilters({...filters, category: e.target.value})}
            className="border rounded px-3 py-2"
          >
            <option value="">All Categories / सभी श्रेणियाँ</option>
            {categories.map(cat => (
              <option key={cat.id} value={cat.id}>{cat.name}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Entries Table */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="px-6 py-4 border-b">
          <h3 className="text-lg font-semibold">Inventory Entries / इन्वेंट्री एंट्रियां</h3>
        </div>
        
        {loading ? (
          <div className="p-12 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2">Loading...</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date / दिनांक</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Item / आइटम</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Category / श्रेणी</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quantity / मात्रा</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price / कीमत</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total / कुल</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Supplier / आपूर्तिकर्ता</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {entries.map(entry => (
                  <tr key={entry.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 text-sm text-gray-900">
                      {new Date(entry.purchase_date).toLocaleDateString('en-IN')}
                    </td>
                    <td className="px-6 py-4 text-sm font-medium text-gray-900">{entry.item_name}</td>
                    <td className="px-6 py-4 text-sm text-gray-900">{entry.category_name}</td>
                    <td className="px-6 py-4 text-sm text-gray-900">{entry.quantity}</td>
                    <td className="px-6 py-4 text-sm text-gray-900">₹{parseFloat(entry.price_per_unit).toLocaleString('en-IN')}</td>
                    <td className="px-6 py-4 text-sm font-semibold text-green-600">₹{parseFloat(entry.total_cost).toLocaleString('en-IN')}</td>
                    <td className="px-6 py-4 text-sm text-gray-900">{entry.supplier_name}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {entries.length === 0 && (
              <div className="text-center py-12">
                <p className="text-gray-500">No entries found / कोई एंट्री नहीं मिली</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default withRoleGuard(AdminInventory, ['admin']);

/////////////////////////////////////////
// pages/admin/inventory-add-entry.js
import { useState, useEffect } from 'react';
import { useAuth } from '@/context/AuthContext';
import withRoleGuard from '@/hoc/withRoleGuard';
import { useRouter } from 'next/router';

function AddInventoryEntry() {
  const { user } = useAuth();
  const router = useRouter();
  const [categories, setCategories] = useState([]);
  const [form, setForm] = useState({
    category: '',
    item_name: '',
    price_per_unit: '',
    quantity: '',
    purchase_date: new Date().toISOString().split('T')[0],
    supplier_name: '',
    notes: ''
  });
  const [showAddCategory, setShowAddCategory] = useState(false);
  const [newCategory, setNewCategory] = useState({ name: '', description: '' });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const res = await fetch('/api/inventory/categories/?active_only=true', {
        headers: { Authorization: `Bearer ${user?.access}` }
      });
      if (res.ok) setCategories(await res.json());
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleAddCategory = async () => {
    if (!newCategory.name.trim()) return;
    
    try {
      const res = await fetch('/api/inventory/categories/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user?.access}`
        },
        body: JSON.stringify(newCategory)
      });
      
      if (res.ok) {
        const category = await res.json();
        setCategories([...categories, category]);
        setForm({ ...form, category: category.id });
        setNewCategory({ name: '', description: '' });
        setShowAddCategory(false);
        alert('Category added successfully! / श्रेणी सफलतापूर्वक जोड़ी गई!');
      }
    } catch (error) {
      console.error('Error adding category:', error);
      alert('Error adding category / श्रेणी जोड़ने में त्रुटि');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const res = await fetch('/api/inventory/entries/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user?.access}`
        },
        body: JSON.stringify(form)
      });
      
      if (res.ok) {
        alert('Entry added successfully! / एंट्री सफलतापूर्वक जोड़ी गई!');
        router.push('/admin/inventory');
      } else {
        const error = await res.json();
        alert('Error: ' + JSON.stringify(error));
      }
    } catch (error) {
      console.error('Error adding entry:', error);
      alert('Error adding entry / एंट्री जोड़ने में त्रुटि');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">➕ Add Inventory Entry / इन्वेंट्री एंट्री जोड़ें</h1>
        <button
          onClick={() => router.back()}
          className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700"
        >
          ← Back / वापस
        </button>
      </div>

      {/* Add Category Modal */}
      {showAddCategory && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-96">
            <h3 className="text-lg font-semibold mb-4">Add New Category / नई श्रेणी जोड़ें</h3>
            <input
              type="text"
              placeholder="Category Name / श्रेणी नाम"
              value={newCategory.name}
              onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
              className="w-full px-3 py-2 border rounded mb-3 focus:ring-2 focus:ring-blue-500"
            />
            <textarea
              placeholder="Description (optional) / विवरण (वैकल्पिक)"
              value={newCategory.description}
              onChange={(e) => setNewCategory({ ...newCategory, description: e.target.value })}
              className="w-full px-3 py-2 border rounded mb-4 focus:ring-2 focus:ring-blue-500"
              rows="3"
            />
            <div className="flex space-x-3">
              <button
                onClick={handleAddCategory}
                className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
              >
                Add / जोड़ें
              </button>
              <button
                onClick={() => setShowAddCategory(false)}
                className="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700"
              >
                Cancel / रद्द करें
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Entry Form */}
      <div className="bg-white rounded-lg shadow p-6">
        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Category Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Category / श्रेणी *
              </label>
              <div className="flex">
                <select
                  name="category"
                  value={form.category}
                  onChange={handleChange}
                  required
                  className="flex-1 px-3 py-2 border rounded-l focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">Select Category / श्रेणी चुनें</option>
                  {categories.map(cat => (
                    <option key={cat.id} value={cat.id}>{cat.name}</option>
                  ))}
                </select>
                <button
                  type="button"
                  onClick={() => setShowAddCategory(true)}
                  className="bg-green-600 text-white px-3 py-2 rounded-r hover:bg-green-700"
                  title="Add new category"
                >
                  ➕
                </button>
              </div>
            </div>

            {/* Item Name */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Item Name / आइटम नाम *
              </label>
              <input
                type="text"
                name="item_name"
                value={form.item_name}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="Enter item name / आइटम नाम दर्ज करें"
              />
            </div>

            {/* Price per unit */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price per Unit / प्रति यूनिट कीमत *
              </label>
              <input
                type="number"
                step="0.01"
                name="price_per_unit"
                value={form.price_per_unit}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="0.00"
              />
            </div>

            {/* Quantity */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Quantity / मात्रा *
              </label>
              <input
                type="number"
                step="0.01"
                name="quantity"
                value={form.quantity}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="0"
              />
            </div>

            {/* Purchase Date */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Purchase Date / खरीद दिनांक *
              </label>
              <input
                type="date"
                name="purchase_date"
                value={form.purchase_date}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
              />
            </div>

            {/* Supplier Name */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Supplier Name / आपूर्तिकर्ता नाम *
              </label>
              <input
                type="text"
                name="supplier_name"
                value={form.supplier_name}
                onChange={handleChange}
                required
                className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
                placeholder="Enter supplier name / आपूर्तिकर्ता नाम दर्ज करें"
              />
            </div>
          </div>

          {/* Notes */}
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Notes / टिप्पणी (Optional)
            </label>
            <textarea
              name="notes"
              value={form.notes}
              onChange={handleChange}
              rows="3"
              className="w-full px-3 py-2 border rounded focus:ring-2 focus:ring-blue-500"
              placeholder="Additional notes / अतिरिक्त टिप्पणी"
            />
          </div>

          {/* Total Cost Display */}
          {form.price_per_unit && form.quantity && (
            <div className="mt-4 p-4 bg-gray-50 rounded">
              <p className="text-lg font-semibold">
                Total Cost / कुल लागत: ₹{(parseFloat(form.price_per_unit || 0) * parseFloat(form.quantity || 0)).toLocaleString('en-IN')}
              </p>
            </div>
          )}

          {/* Submit Button */}
          <div className="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              onClick={() => router.back()}
              className="bg-gray-600 text-white px-6 py-2 rounded hover:bg-gray-700"
            >
              Cancel / रद्द करें
            </button>
            <button
              type="submit"
              disabled={loading}
              className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
            >
              {loading ? 'Adding...' : 'Add Entry / एंट्री जोड़ें'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default withRoleGuard(AddInventoryEntry, ['admin']);

/////////////////////////////////////////////////////////
