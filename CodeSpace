cd ~/hotel-management-frontend/hotel-management-frontend

# Check what we currently have
ls -la public/

# Create simple colored square icons using your existing logo.png
# If logo.png exists, resize it; otherwise create simple colored squares

if [ -f "public/logo.png" ]; then
    echo "✅ Found logo.png - will use as base for PWA icons"
    cp public/logo.png public/icon-192.png
    cp public/logo.png public/icon-512.png
else
    echo "⚠️  No logo.png found - creating simple colored placeholder icons"
    
    # Create simple HTML-based icons (fallback method)
    # Create a simple 192x192 colored square
    echo '<svg width="192" height="192" xmlns="http://www.w3.org/2000/svg">
  <rect width="192" height="192" fill="#3B82F6"/>
  <text x="50%" y="50%" font-family="Arial" font-size="72" fill="white" text-anchor="middle" dy="0.35em">H</text>
</svg>' > public/icon-192.svg
    
    # Create a simple 512x512 colored square
    echo '<svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
  <rect width="512" height="512" fill="#3B82F6"/>
  <text x="50%" y="50%" font-family="Arial" font-size="200" fill="white" text-anchor="middle" dy="0.35em">H</text>
</svg>' > public/icon-512.svg
    
    echo "✅ Created simple SVG icons as placeholders"
fi
////////////////////////

/** @type {import('next').NextConfig} */
const nextConfig = {
  trailingSlash: false,
  output: "standalone",
  reactStrictMode: true,
  env: {
    NEXT_PUBLIC_API_URL: "https://hotelrshammad.co.in/api",
    NEXT_PUBLIC_STORAGE_PATH: "/local-storage",
    NEXT_PUBLIC_AUTH_SECRET: "your-secure-secret",
  },
  
  async redirects() {
    return [
      // ✅ EXISTING REDIRECTS (PRESERVED)
      {
        source: "/rooms",
        destination: "/admin/rooms",
        permanent: true,
      },
      {
        source: "/menu", 
        destination: "/admin/menu",
        permanent: true,
      },
      {
        source: "/billing/create",
        destination: "/staff/restaurant-billing",
        permanent: true,
      },
      {
        source: "/admin",
        destination: "/admin/dashboard",
        permanent: true,
      },
      {
        source: "/staff",
        destination: "/staff-dashboard",
        permanent: true,
      },
      {
        source: '/:path+/',
        destination: '/:path+',
        permanent: true,
      },
    ];
  },

  async rewrites() {
    return [
      {
        source: "/api/:path*",
        destination: "https://hotelrshammad.co.in/api/:path*",
      },
    ];
  },
  
  async headers() {
    return [
      // ✅ EXISTING API HEADERS (PRESERVED)
      {
        source: "/api/:path*",
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "https://hotelrshammad.co.in",
          },
          {
            key: "Access-Control-Allow-Methods",
            value: "GET,POST,PUT,DELETE,OPTIONS",
          },
          {
            key: "Access-Control-Allow-Headers",
            value: "Authorization, Content-Type",
          },
        ],
      },
      // ✅ PWA MANIFEST ONLY (SAFE)
      {
        source: '/manifest.json',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/json',
          },
          {
            key: 'Cache-Control', 
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
      // ❌ REMOVED ICON HEADERS UNTIL ICONS EXIST
    ];
  },
  
  basePath: "",
  
  // ✅ IMAGE OPTIMIZATION (SAFE)
  images: {
    domains: ['hotelrshammad.co.in'],
    formats: ['image/webp', 'image/avif'],
  },
};

module.exports = nextConfig;

//////////////////////////////////////////

{
  "name": "Hotel Restaurant Management",
  "short_name": "HotelPOS", 
  "description": "Restaurant Order & Billing System",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "scope": "/",
  "categories": ["business", "productivity"],
  "lang": "en"
}


////////////////////////////

import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          {/* PWA Manifest */}
          <link rel="manifest" href="/manifest.json" />
          
          {/* PWA Meta Tags */}
          <meta name="theme-color" content="#3B82F6" />
          <meta name="apple-mobile-web-app-capable" content="yes" />
          <meta name="apple-mobile-web-app-status-bar-style" content="default" />
          <meta name="apple-mobile-web-app-title" content="HotelPOS" />
          
          {/* ❌ REMOVED ICON REFERENCES UNTIL ICONS EXIST */}
          
          {/* Mobile Optimization */}
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
          <meta name="mobile-web-app-capable" content="yes" />
          <meta name="format-detection" content="telephone=no" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

//////////////////////////////////

cd ~/hotel-management-frontend/hotel-management-frontend

# 1. Create PWA manifest (without icons)
cat > public/manifest.json << 'EOF'
{
  "name": "Hotel Restaurant Management",
  "short_name": "HotelPOS", 
  "description": "Restaurant Order & Billing System",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3B82F6",
  "orientation": "portrait-primary",
  "scope": "/",
  "categories": ["business", "productivity"],
  "lang": "en"
}
EOF

# 2. Create _document.js (without icon references)
cat > pages/_document.js << 'EOF'
import Document, { Html, Head, Main, NextScript } from 'next/document';

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link rel="manifest" href="/manifest.json" />
          <meta name="theme-color" content="#3B82F6" />
          <meta name="apple-mobile-web-app-capable" content="yes" />
          <meta name="apple-mobile-web-app-status-bar-style" content="default" />
          <meta name="apple-mobile-web-app-title" content="HotelPOS" />
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
          <meta name="mobile-web-app-capable" content="yes" />
          <meta name="format-detection" content="telephone=no" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;
EOF

# 3. Backup and update next.config.js (safe version)
cp next.config.js next.config.js.backup.$(date +%Y%m%d_%H%M%S)

cat > next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  trailingSlash: false,
  output: "standalone",
  reactStrictMode: true,
  env: {
    NEXT_PUBLIC_API_URL: "https://hotelrshammad.co.in/api",
    NEXT_PUBLIC_STORAGE_PATH: "/local-storage", 
    NEXT_PUBLIC_AUTH_SECRET: "your-secure-secret",
  },
  
  async redirects() {
    return [
      {
        source: "/rooms",
        destination: "/admin/rooms",
        permanent: true,
      },
      {
        source: "/menu",
        destination: "/admin/menu", 
        permanent: true,
      },
      {
        source: "/billing/create",
        destination: "/staff/restaurant-billing",
        permanent: true,
      },
      {
        source: "/admin",
        destination: "/admin/dashboard",
        permanent: true,
      },
      {
        source: "/staff", 
        destination: "/staff-dashboard",
        permanent: true,
      },
      {
        source: '/:path+/',
        destination: '/:path+',
        permanent: true,
      },
    ];
  },

  async rewrites() {
    return [
      {
        source: "/api/:path*",
        destination: "https://hotelrshammad.co.in/api/:path*",
      },
    ];
  },
  
  async headers() {
    return [
      {
        source: "/api/:path*", 
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "https://hotelrshammad.co.in",
          },
          {
            key: "Access-Control-Allow-Methods",
            value: "GET,POST,PUT,DELETE,OPTIONS",
          },
          {
            key: "Access-Control-Allow-Headers",
            value: "Authorization, Content-Type",
          },
        ],
      },
      {
        source: '/manifest.json',
        headers: [
          {
            key: 'Content-Type', 
            value: 'application/json',
          },
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
  
  basePath: "",
  
  images: {
    domains: ['hotelrshammad.co.in'],
    formats: ['image/webp', 'image/avif'],
  },
};

module.exports = nextConfig;
EOF

echo "✅ Safe PWA setup complete - no broken icon references!"

# 4. Test the build
echo "ߧ Testing build..."
npm run build

echo "ߚ If build succeeds, start with:"
echo "npm start"
